> easy_to_find_method_name_123
  >org.springframework.web.reactive.function.client.DefaultWebClient.get()
   >org.springframework.http.HttpMethod.values()
   <org.springframework.http.HttpMethod.values() - took 0.09 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient.methodInternal(org.springframework.http.HttpMethod)
   <org.springframework.web.reactive.function.client.DefaultWebClient.methodInternal(org.springframework.http.HttpMethod) - took 9.13 ms
  <org.springframework.web.reactive.function.client.DefaultWebClient.get() - took 11.05 ms
  >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
  <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.07 ms
  >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
  <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$100(org.springframework.web.reactive.function.client.DefaultWebClient)
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$100(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
  >org.springframework.web.util.DefaultUriBuilderFactory.expand(java.lang.String,java.lang.Object[])
   >org.springframework.web.util.DefaultUriBuilderFactory.uriString(java.lang.String)
    >org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.initUriComponentsBuilder(java.lang.String)
     >org.springframework.util.StringUtils.isEmpty(java.lang.Object)
     <org.springframework.util.StringUtils.isEmpty(java.lang.Object) - took 0.03 ms
     >org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory)
     <org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
     >org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory)
     <org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
     >org.springframework.web.util.UriComponentsBuilder.cloneBuilder()
      >org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.cloneBuilder()
       >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder()
        >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder()
         >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.append(java.lang.String)
         <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.append(java.lang.String) - took 0.03 ms
        <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder() - took 0.08 ms
       <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder() - took 0.14 ms
      <org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.cloneBuilder() - took 0.23 ms
      >org.springframework.util.LinkedMultiValueMap.putAll(java.util.Map)
       >org.springframework.util.LinkedMultiValueMap.size()
       <org.springframework.util.LinkedMultiValueMap.size() - took 0.05 ms
      <org.springframework.util.LinkedMultiValueMap.putAll(java.util.Map) - took 0.12 ms
     <org.springframework.web.util.UriComponentsBuilder.cloneBuilder() - took 0.45 ms
    <org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.initUriComponentsBuilder(java.lang.String) - took 0.73 ms
   <org.springframework.web.util.DefaultUriBuilderFactory.uriString(java.lang.String) - took 10.24 ms
   >org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(java.lang.Object[])
    >org.springframework.util.ObjectUtils.isEmpty(java.lang.Object[])
    <org.springframework.util.ObjectUtils.isEmpty(java.lang.Object[]) - took 0.03 ms
    >org.springframework.web.util.DefaultUriBuilderFactory.access$300(org.springframework.web.util.DefaultUriBuilderFactory)
    <org.springframework.web.util.DefaultUriBuilderFactory.access$300(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.05 ms
    >org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory)
    <org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
    >org.springframework.web.util.UriComponentsBuilder.build()
     >org.springframework.web.util.UriComponentsBuilder.build(boolean)
      >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
       >org.springframework.util.LinkedMultiValueMap.size()
       <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
       >org.springframework.util.LinkedMultiValueMap.entrySet()
       <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.05 ms
       >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
        >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
        <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.09 ms
       <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 6.07 ms
      <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 6.69 ms
      >org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.build()
       >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.build()
       <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.build() - took 2.16 ms
      <org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.build() - took 2.25 ms
      >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
       >org.springframework.util.LinkedMultiValueMap.size()
       <org.springframework.util.LinkedMultiValueMap.size() - took 0.04 ms
       >org.springframework.util.LinkedMultiValueMap.entrySet()
       <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.03 ms
       >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
        >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
        <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
       <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.07 ms
      <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.26 ms
     <org.springframework.web.util.UriComponentsBuilder.build(boolean) - took 92.64 ms
    <org.springframework.web.util.UriComponentsBuilder.build() - took 92.69 ms
    >org.springframework.web.util.UriComponents.expand(java.lang.Object[])
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
     >org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)
      >org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)
       >org.springframework.util.Assert.state(boolean,java.lang.String)
       <org.springframework.util.Assert.state(boolean,java.lang.String) - took 0.03 ms
       >org.springframework.web.util.UriComponents.getScheme()
       <org.springframework.web.util.UriComponents.getScheme() - took 0.04 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.04 ms
       >org.springframework.web.util.UriComponents.getFragment()
       <org.springframework.web.util.UriComponents.getFragment() - took 0.03 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.02 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.02 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.02 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.02 ms
       >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.expand(org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
        >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath()
        <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath() - took 0.05 ms
        >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
        <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.03 ms
       <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.expand(org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.14 ms
       >org.springframework.web.util.HierarchicalUriComponents.expandQueryParams(org.springframework.web.util.UriComponents$UriTemplateVariables)
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.size()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.size() - took 0.04 ms
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.entrySet()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.entrySet() - took 0.11 ms
        >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
         >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
         <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
         >org.springframework.util.LinkedMultiValueMap.size()
         <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
         >org.springframework.util.LinkedMultiValueMap.entrySet()
         <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.04 ms
         >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
          >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
          <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
         <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.11 ms
        <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.38 ms
       <org.springframework.web.util.HierarchicalUriComponents.expandQueryParams(org.springframework.web.util.UriComponents$UriTemplateVariables) - took 2.21 ms
      <org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables) - took 2.81 ms
     <org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables) - took 2.92 ms
    <org.springframework.web.util.UriComponents.expand(java.lang.Object[]) - took 3.99 ms
    >org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.createUri(org.springframework.web.util.UriComponents)
     >org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory)
     <org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.04 ms
     >org.springframework.web.util.UriComponents.encode()
      >org.springframework.web.util.HierarchicalUriComponents.encode(java.nio.charset.Charset)
       >org.springframework.web.util.HierarchicalUriComponents.encode(java.nio.charset.Charset)
        >org.springframework.web.util.HierarchicalUriComponents$EncodeState.isEncoded()
        <org.springframework.web.util.HierarchicalUriComponents$EncodeState.isEncoded() - took 0.05 ms
        >org.springframework.web.util.UriComponents.getScheme()
        <org.springframework.web.util.UriComponents.getScheme() - took 0.02 ms
        >org.springframework.web.util.UriComponents.getFragment()
        <org.springframework.web.util.UriComponents.getFragment() - took 0.02 ms
        >org.springframework.web.util.HierarchicalUriComponents.encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)
         >org.springframework.util.StringUtils.hasLength(java.lang.String)
         <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.05 ms
         >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
         <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
         >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
         <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
          <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.04 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
          <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.03 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int) - took 0.07 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
          <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.03 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int) - took 0.06 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
          <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$1.isAllowed(int) - took 0.06 ms
        <org.springframework.web.util.HierarchicalUriComponents.encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type) - took 0.61 ms
        >org.springframework.web.util.HierarchicalUriComponents.getHostType()
        <org.springframework.web.util.HierarchicalUriComponents.getHostType() - took 0.03 ms
        >org.springframework.web.util.HierarchicalUriComponents.encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)
         >org.springframework.util.StringUtils.hasLength(java.lang.String)
         <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.02 ms
         >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
         <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
         >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
         <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.03 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.07 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.12 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.07 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.03 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.03 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
         >org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int)
          >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
           >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
           <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
          <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
         <org.springframework.web.util.HierarchicalUriComponents$Type$4.isAllowed(int) - took 0.10 ms
        <org.springframework.web.util.HierarchicalUriComponents.encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type) - took 1.17 ms
        >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.encode(java.util.function.BiFunction)
         >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath()
         <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath() - took 0.03 ms
         >org.springframework.web.util.HierarchicalUriComponents.lambda$encode$2(java.nio.charset.Charset,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type)
          >org.springframework.web.util.HierarchicalUriComponents.encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type)
           >org.springframework.util.StringUtils.hasLength(java.lang.String)
           <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
           >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
           <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
           >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
           <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
           >org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int)
            >org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int)
             >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
              >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
              <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
              >org.springframework.web.util.HierarchicalUriComponents$Type.isDigit(int)
              <org.springframework.web.util.HierarchicalUriComponents$Type.isDigit(int) - took 0.03 ms
             <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.11 ms
             >org.springframework.web.util.HierarchicalUriComponents$Type.isSubDelimiter(int)
             <org.springframework.web.util.HierarchicalUriComponents$Type.isSubDelimiter(int) - took 0.03 ms
            <org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int) - took 0.19 ms
           <org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int) - took 0.26 ms
           >org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int)
            >org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int)
             >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
              >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
              <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.04 ms
             <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.08 ms
            <org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int) - took 0.12 ms
           <org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int) - took 0.15 ms
           >org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int)
            >org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int)
             >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
              >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
              <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
             <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
            <org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int) - took 0.10 ms
           <org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int) - took 0.15 ms
           >org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int)
            >org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int)
             >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
              >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
              <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
             <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.08 ms
            <org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int) - took 0.12 ms
           <org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int) - took 0.17 ms
           >org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int)
            >org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int)
             >org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int)
              >org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int)
              <org.springframework.web.util.HierarchicalUriComponents$Type.isAlpha(int) - took 0.02 ms
             <org.springframework.web.util.HierarchicalUriComponents$Type.isUnreserved(int) - took 0.06 ms
            <org.springframework.web.util.HierarchicalUriComponents$Type.isPchar(int) - took 0.10 ms
           <org.springframework.web.util.HierarchicalUriComponents$Type$7.isAllowed(int) - took 0.14 ms
          <org.springframework.web.util.HierarchicalUriComponents.encodeUriComponent(java.lang.String,java.nio.charset.Charset,org.springframework.web.util.HierarchicalUriComponents$Type) - took 1.09 ms
         <org.springframework.web.util.HierarchicalUriComponents.lambda$encode$2(java.nio.charset.Charset,java.lang.String,org.springframework.web.util.HierarchicalUriComponents$Type) - took 1.14 ms
        <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.encode(java.util.function.BiFunction) - took 1.25 ms
        >org.springframework.web.util.HierarchicalUriComponents.encodeQueryParams(java.util.function.BiFunction)
         >org.springframework.util.CollectionUtils$MultiValueMapAdapter.size()
         <org.springframework.util.CollectionUtils$MultiValueMapAdapter.size() - took 0.03 ms
         >org.springframework.util.CollectionUtils$MultiValueMapAdapter.entrySet()
         <org.springframework.util.CollectionUtils$MultiValueMapAdapter.entrySet() - took 0.04 ms
         >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
          >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
          <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
          >org.springframework.util.LinkedMultiValueMap.size()
          <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
          >org.springframework.util.LinkedMultiValueMap.entrySet()
          <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.03 ms
          >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
           >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
           <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
          <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.06 ms
         <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.22 ms
        <org.springframework.web.util.HierarchicalUriComponents.encodeQueryParams(java.util.function.BiFunction) - took 0.90 ms
       <org.springframework.web.util.HierarchicalUriComponents.encode(java.nio.charset.Charset) - took 13.45 ms
      <org.springframework.web.util.HierarchicalUriComponents.encode(java.nio.charset.Charset) - took 13.50 ms
     <org.springframework.web.util.UriComponents.encode() - took 13.56 ms
     >org.springframework.web.util.UriComponents.toString()
      >org.springframework.web.util.HierarchicalUriComponents.toUriString()
       >org.springframework.web.util.UriComponents.getScheme()
       <org.springframework.web.util.UriComponents.getScheme() - took 0.03 ms
       >org.springframework.web.util.UriComponents.getScheme()
       <org.springframework.web.util.UriComponents.getScheme() - took 0.02 ms
       >org.springframework.web.util.HierarchicalUriComponents.getPort()
       <org.springframework.web.util.HierarchicalUriComponents.getPort() - took 0.04 ms
       >org.springframework.web.util.HierarchicalUriComponents.getPath()
        >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath()
        <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath() - took 0.03 ms
       <org.springframework.web.util.HierarchicalUriComponents.getPath() - took 0.08 ms
       >org.springframework.util.StringUtils.hasLength(java.lang.String)
       <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.02 ms
       >org.springframework.web.util.HierarchicalUriComponents.getQuery()
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty() - took 0.04 ms
       <org.springframework.web.util.HierarchicalUriComponents.getQuery() - took 0.08 ms
       >org.springframework.web.util.UriComponents.getFragment()
       <org.springframework.web.util.UriComponents.getFragment() - took 0.02 ms
      <org.springframework.web.util.HierarchicalUriComponents.toUriString() - took 0.46 ms
     <org.springframework.web.util.UriComponents.toString() - took 0.51 ms
    <org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.createUri(org.springframework.web.util.UriComponents) - took 14.24 ms
   <org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(java.lang.Object[]) - took 111.18 ms
  <org.springframework.web.util.DefaultUriBuilderFactory.expand(java.lang.String,java.lang.Object[]) - took 121.48 ms
  >org.springframework.web.reactive.function.client.ClientRequest.create(org.springframework.http.HttpMethod,java.net.URI)
   >org.springframework.core.ResolvableType.forClass(java.lang.Class)
   <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.08 ms
   >org.springframework.core.ResolvableType.forClass(java.lang.Class)
   <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.07 ms
   >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[])
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
    >org.springframework.core.ResolvableType.forClass(java.lang.Class)
    <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
    >org.springframework.core.ResolvableType.forClass(java.lang.Class)
    <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.02 ms
    >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[])
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
     >org.springframework.util.Assert.isTrue(boolean,java.lang.String)
     <org.springframework.util.Assert.isTrue(boolean,java.lang.String) - took 0.03 ms
     >org.springframework.core.ResolvableType.getType()
      >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
      <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.04 ms
     <org.springframework.core.ResolvableType.getType() - took 0.08 ms
     >org.springframework.core.ResolvableType.getType()
      >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
      <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.02 ms
     <org.springframework.core.ResolvableType.getType() - took 0.06 ms
     >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
      >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
       >org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries()
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.08 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.05 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.11 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
       <org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries() - took 1.29 ms
       >org.springframework.core.ResolvableType.calculateHashCode()
        >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
         >org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode()
         <org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode() - took 0.03 ms
        <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.07 ms
        >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
        <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.04 ms
        >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
         >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[])
          >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
            >org.springframework.core.ResolvableType.calculateHashCode()
             >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
             <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
            <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
           <org.springframework.core.ResolvableType.hashCode() - took 0.11 ms
          <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.15 ms
          >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
            >org.springframework.core.ResolvableType.calculateHashCode()
             >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
             <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.05 ms
            <org.springframework.core.ResolvableType.calculateHashCode() - took 0.09 ms
           <org.springframework.core.ResolvableType.hashCode() - took 0.13 ms
          <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.17 ms
         <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[]) - took 0.38 ms
        <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.42 ms
       <org.springframework.core.ResolvableType.calculateHashCode() - took 0.60 ms
       >org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object)
        >org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object)
         >org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
          >org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
           <org.springframework.core.ResolvableType.hashCode() - took 0.02 ms
          <org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object) - took 0.06 ms
          >org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int)
          <org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int) - took 0.02 ms
          >org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
            >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
            <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[])
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[]) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int)
            >org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.getHash()
            <org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.getHash() - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get()
            <org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get() - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Entry.getKey()
            <org.springframework.util.ConcurrentReferenceHashMap$Entry.getKey() - took 0.03 ms
            >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
             >org.springframework.core.ResolvableType.equals(java.lang.Object)
              >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
               >org.springframework.core.ResolvableType$SyntheticParameterizedType.equals(java.lang.Object)
                >org.springframework.core.ResolvableType$SyntheticParameterizedType.getOwnerType()
                <org.springframework.core.ResolvableType$SyntheticParameterizedType.getOwnerType() - took 0.03 ms
                >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
                <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
                >org.springframework.core.ResolvableType$SyntheticParameterizedType.getActualTypeArguments()
                <org.springframework.core.ResolvableType$SyntheticParameterizedType.getActualTypeArguments() - took 0.03 ms
               <org.springframework.core.ResolvableType$SyntheticParameterizedType.equals(java.lang.Object) - took 0.14 ms
              <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.19 ms
              >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
              <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.03 ms
              >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
              <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.03 ms
              >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
               >org.springframework.util.ObjectUtils.arrayEquals(java.lang.Object,java.lang.Object)
                >org.springframework.core.ResolvableType.equals(java.lang.Object)
                 >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                 <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                 >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                 <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.10 ms
                >org.springframework.core.ResolvableType.equals(java.lang.Object)
                 >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                 <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.02 ms
                 >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                 <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.10 ms
               <org.springframework.util.ObjectUtils.arrayEquals(java.lang.Object,java.lang.Object) - took 0.26 ms
              <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.30 ms
              >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
              <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.02 ms
             <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.68 ms
            <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.72 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int) - took 0.88 ms
          <org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 1.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 1.19 ms
         >org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get()
         <org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object) - took 1.27 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Entry.getValue()
        <org.springframework.util.ConcurrentReferenceHashMap$Entry.getValue() - took 0.03 ms
       <org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object) - took 1.35 ms
      <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 3.31 ms
     <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 3.35 ms
    <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[]) - took 3.67 ms
   <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[]) - took 3.87 ms
   >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[])
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
    >org.springframework.core.ResolvableType.forClass(java.lang.Class)
    <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
    >org.springframework.core.ResolvableType.forClass(java.lang.Class)
    <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
    >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[])
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
     >org.springframework.util.Assert.isTrue(boolean,java.lang.String)
     <org.springframework.util.Assert.isTrue(boolean,java.lang.String) - took 0.03 ms
     >org.springframework.core.ResolvableType.getType()
      >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
      <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
     <org.springframework.core.ResolvableType.getType() - took 0.06 ms
     >org.springframework.core.ResolvableType.getType()
      >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
      <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
     <org.springframework.core.ResolvableType.getType() - took 0.06 ms
     >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
      >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
       >org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries()
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.09 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.09 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.10 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.08 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
        >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
         >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
         <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
        <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
       <org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries() - took 1.34 ms
       >org.springframework.core.ResolvableType.calculateHashCode()
        >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
         >org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode()
         <org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode() - took 0.03 ms
        <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.07 ms
        >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
        <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.02 ms
        >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
         >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[])
          >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
            >org.springframework.core.ResolvableType.calculateHashCode()
             >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
             <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
            <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
           <org.springframework.core.ResolvableType.hashCode() - took 0.11 ms
          <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.15 ms
          >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
            >org.springframework.core.ResolvableType.calculateHashCode()
             >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
             <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
            <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
           <org.springframework.core.ResolvableType.hashCode() - took 0.10 ms
          <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.14 ms
         <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[]) - took 0.34 ms
        <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.38 ms
       <org.springframework.core.ResolvableType.calculateHashCode() - took 0.53 ms
       >org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object)
        >org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object)
         >org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
          >org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
           <org.springframework.core.ResolvableType.hashCode() - took 0.03 ms
          <org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object) - took 0.06 ms
          >org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int)
          <org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int) - took 0.03 ms
          >org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
            >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
            <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
          <org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 0.10 ms
         <org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 0.25 ms
        <org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object) - took 0.29 ms
       <org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object) - took 0.33 ms
       >org.springframework.core.ResolvableType.resolveClass()
        >org.springframework.core.ResolvableType.resolveType()
         >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
         <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
         >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
          >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
           >org.springframework.core.ResolvableType.resolveClass()
           <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
          <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.07 ms
         <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.12 ms
        <org.springframework.core.ResolvableType.resolveType() - took 0.19 ms
        >org.springframework.core.ResolvableType.resolve()
        <org.springframework.core.ResolvableType.resolve() - took 0.02 ms
       <org.springframework.core.ResolvableType.resolveClass() - took 0.27 ms
       >org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object)
        >org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object,boolean)
         >org.springframework.util.ConcurrentReferenceHashMap.doTask(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task)
          >org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object)
           >org.springframework.core.ResolvableType.hashCode()
           <org.springframework.core.ResolvableType.hashCode() - took 0.03 ms
          <org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object) - took 0.07 ms
          >org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int)
          <org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int) - took 0.03 ms
          >org.springframework.util.ConcurrentReferenceHashMap$Segment.doTask(int,java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task)
           >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
           <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
           <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
            >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
            <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
           <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[])
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[]) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int)
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$1.execute(org.springframework.util.ConcurrentReferenceHashMap$Reference,org.springframework.util.ConcurrentReferenceHashMap$Entry,org.springframework.util.ConcurrentReferenceHashMap$Entries)
            >org.springframework.util.Assert.state(boolean,java.lang.String)
            <org.springframework.util.Assert.state(boolean,java.lang.String) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Segment$1.add(java.lang.Object)
             >org.springframework.util.ConcurrentReferenceHashMap$Segment.access$300(org.springframework.util.ConcurrentReferenceHashMap$Segment)
             <org.springframework.util.ConcurrentReferenceHashMap$Segment.access$300(org.springframework.util.ConcurrentReferenceHashMap$Segment) - took 0.03 ms
             >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry,int,org.springframework.util.ConcurrentReferenceHashMap$Reference)
              >org.springframework.util.ConcurrentReferenceHashMap.access$700(org.springframework.util.ConcurrentReferenceHashMap)
              <org.springframework.util.ConcurrentReferenceHashMap.access$700(org.springframework.util.ConcurrentReferenceHashMap) - took 0.03 ms
             <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry,int,org.springframework.util.ConcurrentReferenceHashMap$Reference) - took 0.07 ms
             >org.springframework.util.ConcurrentReferenceHashMap$Segment.access$400(org.springframework.util.ConcurrentReferenceHashMap$Segment)
             <org.springframework.util.ConcurrentReferenceHashMap$Segment.access$400(org.springframework.util.ConcurrentReferenceHashMap$Segment) - took 0.03 ms
             >org.springframework.util.ConcurrentReferenceHashMap$Segment.access$508(org.springframework.util.ConcurrentReferenceHashMap$Segment)
             <org.springframework.util.ConcurrentReferenceHashMap$Segment.access$508(org.springframework.util.ConcurrentReferenceHashMap$Segment) - took 0.03 ms
            <org.springframework.util.ConcurrentReferenceHashMap$Segment$1.add(java.lang.Object) - took 0.22 ms
           <org.springframework.util.ConcurrentReferenceHashMap$1.execute(org.springframework.util.ConcurrentReferenceHashMap$Reference,org.springframework.util.ConcurrentReferenceHashMap$Entry,org.springframework.util.ConcurrentReferenceHashMap$Entries) - took 0.31 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
           <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
          <org.springframework.util.ConcurrentReferenceHashMap$Segment.doTask(int,java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task) - took 0.67 ms
         <org.springframework.util.ConcurrentReferenceHashMap.doTask(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task) - took 0.82 ms
        <org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object,boolean) - took 0.88 ms
       <org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object) - took 0.92 ms
      <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 3.48 ms
     <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 3.53 ms
    <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[]) - took 3.84 ms
   <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[]) - took 4.04 ms
   >org.springframework.web.reactive.function.BodyInserters.empty()
   <org.springframework.web.reactive.function.BodyInserters.empty() - took 0.09 ms
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
  <org.springframework.web.reactive.function.client.ClientRequest.create(org.springframework.http.HttpMethod,java.net.URI) - took 52.30 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.headers(java.util.function.Consumer)
   >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
   <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient.access$400(org.springframework.web.reactive.function.client.DefaultWebClient)
   <org.springframework.web.reactive.function.client.DefaultWebClient.access$400(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
   >org.springframework.http.HttpHeaders.addAll(org.springframework.util.MultiValueMap)
    >org.springframework.http.HttpHeaders.entrySet()
     >org.springframework.util.LinkedCaseInsensitiveMap.entrySet()
     <org.springframework.util.LinkedCaseInsensitiveMap.entrySet() - took 0.04 ms
    <org.springframework.http.HttpHeaders.entrySet() - took 0.17 ms
   <org.springframework.http.HttpHeaders.addAll(org.springframework.util.MultiValueMap) - took 0.88 ms
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.headers(java.util.function.Consumer) - took 1.08 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.cookies(java.util.function.Consumer)
   >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
   <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.04 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient.access$500(org.springframework.web.reactive.function.client.DefaultWebClient)
   <org.springframework.web.reactive.function.client.DefaultWebClient.access$500(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.04 ms
   >org.springframework.util.LinkedMultiValueMap.addAll(org.springframework.util.MultiValueMap)
    >org.springframework.util.LinkedMultiValueMap.entrySet()
    <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.04 ms
   <org.springframework.util.LinkedMultiValueMap.addAll(org.springframework.util.MultiValueMap) - took 0.12 ms
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.cookies(java.util.function.Consumer) - took 0.35 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.attributes(java.util.function.Consumer)
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.attributes(java.util.function.Consumer) - took 0.06 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.build()
   >org.springframework.http.HttpHeaders.readOnlyHttpHeaders(org.springframework.http.HttpHeaders)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.http.HttpHeaders.size()
     >org.springframework.util.LinkedCaseInsensitiveMap.size()
     <org.springframework.util.LinkedCaseInsensitiveMap.size() - took 0.03 ms
    <org.springframework.http.HttpHeaders.size() - took 0.07 ms
    >org.springframework.http.HttpHeaders.entrySet()
     >org.springframework.util.LinkedCaseInsensitiveMap.entrySet()
     <org.springframework.util.LinkedCaseInsensitiveMap.entrySet() - took 0.03 ms
    <org.springframework.http.HttpHeaders.entrySet() - took 0.07 ms
   <org.springframework.http.HttpHeaders.readOnlyHttpHeaders(org.springframework.http.HttpHeaders) - took 0.33 ms
   >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.util.LinkedMultiValueMap.size()
    <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
    >org.springframework.util.LinkedMultiValueMap.entrySet()
    <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.05 ms
    >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.07 ms
   <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.25 ms
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.build() - took 3.46 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$300(org.springframework.web.reactive.function.client.DefaultWebClient)
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$300(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
  >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(org.springframework.web.reactive.function.client.ClientRequest)
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.method()
   <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.method() - took 0.04 ms
   >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.url()
   <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.url() - took 0.04 ms
   >org.springframework.http.client.reactive.ReactorClientHttpConnector.connect(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function)
    >org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptHttpMethod(org.springframework.http.HttpMethod)
    <org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptHttpMethod(org.springframework.http.HttpMethod) - took 0.06 ms
   <org.springframework.http.client.reactive.ReactorClientHttpConnector.connect(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function) - took 1.32 ms
  <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(org.springframework.web.reactive.function.client.ClientRequest) - took 9.01 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$200()
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$200() - took 0.05 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(java.lang.Class)
  <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(java.lang.Class) - took 0.39 ms
  >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$1(org.reactivestreams.Subscription)
  <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$1(org.reactivestreams.Subscription) - took 0.10 ms
  >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$2(long)
  <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$2(long) - took 0.04 ms
  >org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$1(java.util.function.Function,org.springframework.http.HttpMethod,java.net.URI,reactor.ipc.netty.http.client.HttpClientRequest)
   >org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptRequest(org.springframework.http.HttpMethod,java.net.URI,reactor.ipc.netty.http.client.HttpClientRequest)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.10 ms
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.09 ms
   <org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptRequest(org.springframework.http.HttpMethod,java.net.URI,reactor.ipc.netty.http.client.HttpClientRequest) - took 101.91 ms
   >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$0(org.springframework.web.reactive.function.client.ClientRequest,org.springframework.http.client.reactive.ClientHttpRequest)
    >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(org.springframework.http.client.reactive.ClientHttpRequest,org.springframework.web.reactive.function.client.ExchangeStrategies)
     >org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders()
     <org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders() - took 0.06 ms
     >org.springframework.http.HttpHeaders.isEmpty()
      >org.springframework.util.LinkedCaseInsensitiveMap.isEmpty()
      <org.springframework.util.LinkedCaseInsensitiveMap.isEmpty() - took 0.03 ms
     <org.springframework.http.HttpHeaders.isEmpty() - took 0.09 ms
     >org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies()
     <org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies() - took 0.03 ms
     >org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty()
     <org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty() - took 0.05 ms
     >org.springframework.web.reactive.function.BodyInserters.lambda$static$0(org.springframework.http.ReactiveHttpOutputMessage,org.springframework.web.reactive.function.BodyInserter$Context)
      >org.springframework.http.client.reactive.ReactorClientHttpRequest.setComplete()
       >org.springframework.http.client.reactive.AbstractClientHttpRequest.doCommit(java.util.function.Supplier)
        >org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$doCommit$1()
        <org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$doCommit$1() - took 0.28 ms
        >org.springframework.http.client.reactive.ReactorClientHttpRequest.lambda$setComplete$3()
        <org.springframework.http.client.reactive.ReactorClientHttpRequest.lambda$setComplete$3() - took 1.93 ms
       <org.springframework.http.client.reactive.AbstractClientHttpRequest.doCommit(java.util.function.Supplier) - took 2.91 ms
      <org.springframework.http.client.reactive.ReactorClientHttpRequest.setComplete() - took 3.33 ms
     <org.springframework.web.reactive.function.BodyInserters.lambda$static$0(org.springframework.http.ReactiveHttpOutputMessage,org.springframework.web.reactive.function.BodyInserter$Context) - took 3.46 ms
    <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(org.springframework.http.client.reactive.ClientHttpRequest,org.springframework.web.reactive.function.client.ExchangeStrategies) - took 5.22 ms
   <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$0(org.springframework.web.reactive.function.client.ClientRequest,org.springframework.http.client.reactive.ClientHttpRequest) - took 5.27 ms
  <org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$1(java.util.function.Function,org.springframework.http.HttpMethod,java.net.URI,reactor.ipc.netty.http.client.HttpClientRequest) - took 107.41 ms
  >org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$null$0()
   >org.springframework.http.client.reactive.ReactorClientHttpRequest.applyHeaders()
    >org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders()
    <org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders() - took 0.03 ms
    >org.springframework.http.HttpHeaders.entrySet()
     >org.springframework.util.LinkedCaseInsensitiveMap.entrySet()
     <org.springframework.util.LinkedCaseInsensitiveMap.entrySet() - took 0.03 ms
    <org.springframework.http.HttpHeaders.entrySet() - took 0.09 ms
   <org.springframework.http.client.reactive.ReactorClientHttpRequest.applyHeaders() - took 0.51 ms
   >org.springframework.http.client.reactive.ReactorClientHttpRequest.applyCookies()
    >org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies()
    <org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies() - took 0.05 ms
    >org.springframework.util.LinkedMultiValueMap.values()
    <org.springframework.util.LinkedMultiValueMap.values() - took 0.04 ms
   <org.springframework.http.client.reactive.ReactorClientHttpRequest.applyCookies() - took 3.45 ms
  <org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$null$0() - took 4.07 ms
  >org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptResponse(reactor.ipc.netty.http.client.HttpClientResponse)
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.08 ms
  <org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptResponse(reactor.ipc.netty.http.client.HttpClientResponse) - took 4.43 ms
  >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$4(org.springframework.http.client.reactive.ClientHttpResponse)
  <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$4(org.springframework.http.client.reactive.ClientHttpResponse) - took 14.45 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToMono$0(java.lang.Class,org.springframework.web.reactive.function.client.ClientResponse)
   >org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(java.lang.Class)
    >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[])
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.07 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
     >org.springframework.core.ResolvableType.forClass(java.lang.Class)
     <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
     >org.springframework.core.ResolvableType.forClass(java.lang.Class)
     <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
     >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[])
      >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
      <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
      >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
      <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.02 ms
      >org.springframework.util.Assert.isTrue(boolean,java.lang.String)
      <org.springframework.util.Assert.isTrue(boolean,java.lang.String) - took 0.03 ms
      >org.springframework.core.ResolvableType.getType()
       >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
       <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.05 ms
      <org.springframework.core.ResolvableType.getType() - took 0.10 ms
      >org.springframework.core.ResolvableType.getType()
       >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
       <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
      <org.springframework.core.ResolvableType.getType() - took 0.07 ms
      >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
       >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
        >org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries()
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.08 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.05 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.10 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.06 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.09 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.08 ms
        <org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries() - took 1.43 ms
        >org.springframework.core.ResolvableType.calculateHashCode()
         >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
          >org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode()
          <org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode() - took 0.03 ms
         <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.07 ms
         >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
         <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.03 ms
         >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
          >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[])
           >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
             >org.springframework.core.ResolvableType.calculateHashCode()
              >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
              <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
             <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
            <org.springframework.core.ResolvableType.hashCode() - took 0.11 ms
           <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.19 ms
           >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
             >org.springframework.core.ResolvableType.calculateHashCode()
              >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
              <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
             <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
            <org.springframework.core.ResolvableType.hashCode() - took 0.11 ms
           <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.16 ms
          <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[]) - took 0.42 ms
         <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.46 ms
        <org.springframework.core.ResolvableType.calculateHashCode() - took 0.63 ms
        >org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object)
         >org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object)
          >org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
           >org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
            <org.springframework.core.ResolvableType.hashCode() - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object) - took 0.07 ms
           >org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int)
           <org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
             >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
             <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[])
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[]) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int)
             >org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.getHash()
             <org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.getHash() - took 0.03 ms
             >org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get()
             <org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get() - took 0.03 ms
             >org.springframework.util.ConcurrentReferenceHashMap$Entry.getKey()
             <org.springframework.util.ConcurrentReferenceHashMap$Entry.getKey() - took 0.04 ms
             >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
              >org.springframework.core.ResolvableType.equals(java.lang.Object)
               >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                >org.springframework.core.ResolvableType$SyntheticParameterizedType.equals(java.lang.Object)
                 >org.springframework.core.ResolvableType$SyntheticParameterizedType.getOwnerType()
                 <org.springframework.core.ResolvableType$SyntheticParameterizedType.getOwnerType() - took 0.03 ms
                 >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
                 <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
                 >org.springframework.core.ResolvableType$SyntheticParameterizedType.getActualTypeArguments()
                 <org.springframework.core.ResolvableType$SyntheticParameterizedType.getActualTypeArguments() - took 0.03 ms
                <org.springframework.core.ResolvableType$SyntheticParameterizedType.equals(java.lang.Object) - took 0.15 ms
               <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.19 ms
               >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
               <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.03 ms
               >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
               <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.03 ms
               >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                >org.springframework.util.ObjectUtils.arrayEquals(java.lang.Object,java.lang.Object)
                 >org.springframework.core.ResolvableType.equals(java.lang.Object)
                  >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                  <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                  >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                  <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                 <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.11 ms
                 >org.springframework.core.ResolvableType.equals(java.lang.Object)
                  >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                  <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                  >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
                  <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
                 <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.13 ms
                <org.springframework.util.ObjectUtils.arrayEquals(java.lang.Object,java.lang.Object) - took 0.30 ms
               <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.34 ms
               >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
               <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
              <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.71 ms
             <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.75 ms
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int) - took 0.93 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 1.11 ms
          <org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 1.27 ms
          >org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get()
          <org.springframework.util.ConcurrentReferenceHashMap$SoftEntryReference.get() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object) - took 1.36 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Entry.getValue()
         <org.springframework.util.ConcurrentReferenceHashMap$Entry.getValue() - took 0.03 ms
        <org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object) - took 1.44 ms
       <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 3.57 ms
      <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 3.62 ms
     <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[]) - took 3.99 ms
    <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[]) - took 4.41 ms
    >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[])
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
     >org.springframework.core.ResolvableType.forClass(java.lang.Class)
     <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
     >org.springframework.core.ResolvableType.forClass(java.lang.Class)
     <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
     >org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[])
      >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
      <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
      >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
      <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
      >org.springframework.util.Assert.isTrue(boolean,java.lang.String)
      <org.springframework.util.Assert.isTrue(boolean,java.lang.String) - took 0.03 ms
      >org.springframework.core.ResolvableType.getType()
       >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
       <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
      <org.springframework.core.ResolvableType.getType() - took 0.07 ms
      >org.springframework.core.ResolvableType.getType()
       >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
       <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
      <org.springframework.core.ResolvableType.getType() - took 0.07 ms
      >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
       >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
        >org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries()
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.08 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.12 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
         >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
          >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
          <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.02 ms
         <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
        <org.springframework.util.ConcurrentReferenceHashMap.purgeUnreferencedEntries() - took 1.40 ms
        >org.springframework.core.ResolvableType.calculateHashCode()
         >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
          >org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode()
          <org.springframework.core.ResolvableType$SyntheticParameterizedType.hashCode() - took 0.03 ms
         <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.07 ms
         >org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource()
         <org.springframework.core.ResolvableType$TypeVariablesVariableResolver.getSource() - took 0.03 ms
         >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
          >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[])
           >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
             >org.springframework.core.ResolvableType.calculateHashCode()
              >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
              <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
             <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
            <org.springframework.core.ResolvableType.hashCode() - took 0.11 ms
           <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.16 ms
           >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
             >org.springframework.core.ResolvableType.calculateHashCode()
              >org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object)
              <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.03 ms
             <org.springframework.core.ResolvableType.calculateHashCode() - took 0.07 ms
            <org.springframework.core.ResolvableType.hashCode() - took 0.11 ms
           <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.16 ms
          <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object[]) - took 0.38 ms
         <org.springframework.util.ObjectUtils.nullSafeHashCode(java.lang.Object) - took 0.42 ms
        <org.springframework.core.ResolvableType.calculateHashCode() - took 0.60 ms
        >org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object)
         >org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object)
          >org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
           >org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
            <org.springframework.core.ResolvableType.hashCode() - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object) - took 0.07 ms
           >org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int)
           <org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure)
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
             >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
             <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.08 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(java.lang.Object,int,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 0.12 ms
          <org.springframework.util.ConcurrentReferenceHashMap.getReference(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Restructure) - took 0.30 ms
         <org.springframework.util.ConcurrentReferenceHashMap.getEntryIfAvailable(java.lang.Object) - took 0.34 ms
        <org.springframework.util.ConcurrentReferenceHashMap.get(java.lang.Object) - took 0.38 ms
        >org.springframework.core.ResolvableType.resolveClass()
         >org.springframework.core.ResolvableType.resolveType()
          >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
          <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
          >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
           >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
            >org.springframework.core.ResolvableType.resolveClass()
            <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
           <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.07 ms
          <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.12 ms
         <org.springframework.core.ResolvableType.resolveType() - took 0.20 ms
         >org.springframework.core.ResolvableType.resolve()
         <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
        <org.springframework.core.ResolvableType.resolveClass() - took 0.28 ms
        >org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object)
         >org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object,boolean)
          >org.springframework.util.ConcurrentReferenceHashMap.doTask(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task)
           >org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object)
            >org.springframework.core.ResolvableType.hashCode()
            <org.springframework.core.ResolvableType.hashCode() - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap.getHash(java.lang.Object) - took 0.07 ms
           >org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int)
           <org.springframework.util.ConcurrentReferenceHashMap.getSegmentForHash(int) - took 0.03 ms
           >org.springframework.util.ConcurrentReferenceHashMap$Segment.doTask(int,java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task)
            >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
            <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
            <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean)
             >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge()
             <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge() - took 0.03 ms
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(boolean) - took 0.07 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
            <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[])
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.getIndex(int,org.springframework.util.ConcurrentReferenceHashMap$Reference[]) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int)
            <org.springframework.util.ConcurrentReferenceHashMap$Segment.findInChain(org.springframework.util.ConcurrentReferenceHashMap$Reference,java.lang.Object,int) - took 0.03 ms
            >org.springframework.util.ConcurrentReferenceHashMap$1.execute(org.springframework.util.ConcurrentReferenceHashMap$Reference,org.springframework.util.ConcurrentReferenceHashMap$Entry,org.springframework.util.ConcurrentReferenceHashMap$Entries)
             >org.springframework.util.Assert.state(boolean,java.lang.String)
             <org.springframework.util.Assert.state(boolean,java.lang.String) - took 0.03 ms
             >org.springframework.util.ConcurrentReferenceHashMap$Segment$1.add(java.lang.Object)
              >org.springframework.util.ConcurrentReferenceHashMap$Segment.access$300(org.springframework.util.ConcurrentReferenceHashMap$Segment)
              <org.springframework.util.ConcurrentReferenceHashMap$Segment.access$300(org.springframework.util.ConcurrentReferenceHashMap$Segment) - took 0.04 ms
              >org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry,int,org.springframework.util.ConcurrentReferenceHashMap$Reference)
               >org.springframework.util.ConcurrentReferenceHashMap.access$700(org.springframework.util.ConcurrentReferenceHashMap)
               <org.springframework.util.ConcurrentReferenceHashMap.access$700(org.springframework.util.ConcurrentReferenceHashMap) - took 0.03 ms
              <org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.createReference(org.springframework.util.ConcurrentReferenceHashMap$Entry,int,org.springframework.util.ConcurrentReferenceHashMap$Reference) - took 0.08 ms
              >org.springframework.util.ConcurrentReferenceHashMap$Segment.access$400(org.springframework.util.ConcurrentReferenceHashMap$Segment)
              <org.springframework.util.ConcurrentReferenceHashMap$Segment.access$400(org.springframework.util.ConcurrentReferenceHashMap$Segment) - took 0.03 ms
              >org.springframework.util.ConcurrentReferenceHashMap$Segment.access$508(org.springframework.util.ConcurrentReferenceHashMap$Segment)
              <org.springframework.util.ConcurrentReferenceHashMap$Segment.access$508(org.springframework.util.ConcurrentReferenceHashMap$Segment) - took 0.03 ms
             <org.springframework.util.ConcurrentReferenceHashMap$Segment$1.add(java.lang.Object) - took 0.26 ms
            <org.springframework.util.ConcurrentReferenceHashMap$1.execute(org.springframework.util.ConcurrentReferenceHashMap$Reference,org.springframework.util.ConcurrentReferenceHashMap$Entry,org.springframework.util.ConcurrentReferenceHashMap$Entries) - took 0.35 ms
            >org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption)
            <org.springframework.util.ConcurrentReferenceHashMap$Task.hasOption(org.springframework.util.ConcurrentReferenceHashMap$TaskOption) - took 0.03 ms
           <org.springframework.util.ConcurrentReferenceHashMap$Segment.doTask(int,java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task) - took 0.74 ms
          <org.springframework.util.ConcurrentReferenceHashMap.doTask(java.lang.Object,org.springframework.util.ConcurrentReferenceHashMap$Task) - took 0.91 ms
         <org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object,boolean) - took 0.97 ms
        <org.springframework.util.ConcurrentReferenceHashMap.put(java.lang.Object,java.lang.Object) - took 1.01 ms
       <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 3.78 ms
      <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 3.83 ms
     <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,org.springframework.core.ResolvableType[]) - took 4.17 ms
    <org.springframework.core.ResolvableType.forClassWithGenerics(java.lang.Class,java.lang.Class[]) - took 4.40 ms
    >org.springframework.core.ResolvableType.forClass(java.lang.Class)
    <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
    >org.springframework.core.ResolvableType.forClass(java.lang.Class)
    <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
    >org.springframework.web.reactive.function.BodyExtractors.toMono(java.lang.Class)
     >org.springframework.core.ResolvableType.forClass(java.lang.Class)
     <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
     >org.springframework.web.reactive.function.BodyExtractors.toMono(org.springframework.core.ResolvableType)
     <org.springframework.web.reactive.function.BodyExtractors.toMono(org.springframework.core.ResolvableType) - took 0.78 ms
    <org.springframework.web.reactive.function.BodyExtractors.toMono(java.lang.Class) - took 0.90 ms
    >org.springframework.web.reactive.function.client.DefaultClientResponse.body(org.springframework.web.reactive.function.BodyExtractor)
     >org.springframework.web.reactive.function.BodyExtractors.lambda$toMono$2(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context)
      >org.springframework.web.reactive.function.BodyExtractors.readWithMessageReaders(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)
       >org.springframework.core.ResolvableType.equals(java.lang.Object)
        >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
        <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
       <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.09 ms
       >org.springframework.web.reactive.function.BodyExtractors.contentType(org.springframework.http.HttpMessage)
        >org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders()
         >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
          >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
           >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
             <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.08 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.14 ms
           >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
           <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.04 ms
           >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object)
             >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
              >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
              <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
             >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
              >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
              <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.07 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object) - took 0.20 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object) - took 0.24 ms
          <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.74 ms
         <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.83 ms
         >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
          >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
           >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
             <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.11 ms
           >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
           <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
           >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object)
             >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
              >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
              <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
             >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
              >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
              <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.07 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object) - took 0.19 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object) - took 0.23 ms
          <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.46 ms
         <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.53 ms
         >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
          >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
           >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
             <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.04 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.10 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.16 ms
           >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
           <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
           >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object)
             >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
              >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
              <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.09 ms
             >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
              >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
              <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.08 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object) - took 0.22 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object) - took 0.26 ms
          <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.52 ms
         <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.57 ms
        <org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders() - took 2.93 ms
        >org.springframework.http.HttpHeaders.getContentType()
         >org.springframework.http.HttpHeaders.getFirst(java.lang.String)
          >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
           >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
            >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
            <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
          <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.12 ms
         <org.springframework.http.HttpHeaders.getFirst(java.lang.String) - took 0.17 ms
         >org.springframework.util.StringUtils.hasLength(java.lang.String)
         <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
         >org.springframework.http.MediaType.parseMediaType(java.lang.String)
          >org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String)
           >org.springframework.util.StringUtils.hasLength(java.lang.String)
           <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
           >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
            >org.springframework.util.StringUtils.hasLength(java.lang.String)
            <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.02 ms
           <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
           >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
            >org.springframework.util.StringUtils.hasLength(java.lang.String)
            <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
           <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.09 ms
           >org.springframework.util.MimeType.checkToken(java.lang.String)
           <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.04 ms
           >org.springframework.util.MimeType.checkToken(java.lang.String)
           <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.04 ms
           >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
           <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.04 ms
          <org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String) - took 0.46 ms
          >org.springframework.util.MimeType.getType()
          <org.springframework.util.MimeType.getType() - took 0.03 ms
          >org.springframework.util.MimeType.getSubtype()
          <org.springframework.util.MimeType.getSubtype() - took 0.03 ms
          >org.springframework.util.MimeType.getParameters()
          <org.springframework.util.MimeType.getParameters() - took 0.03 ms
          >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
           >org.springframework.util.StringUtils.hasLength(java.lang.String)
           <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.04 ms
          <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.08 ms
          >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
           >org.springframework.util.StringUtils.hasLength(java.lang.String)
           <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.02 ms
          <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
          >org.springframework.util.MimeType.checkToken(java.lang.String)
          <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
          >org.springframework.util.MimeType.checkToken(java.lang.String)
          <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
          >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
          <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
         <org.springframework.http.MediaType.parseMediaType(java.lang.String) - took 0.92 ms
        <org.springframework.http.HttpHeaders.getContentType() - took 1.21 ms
       <org.springframework.web.reactive.function.BodyExtractors.contentType(org.springframework.http.HttpMessage) - took 4.21 ms
       >org.springframework.web.reactive.function.client.DefaultClientResponse$1.messageReaders()
        >org.springframework.web.reactive.function.client.DefaultClientResponse.access$100(org.springframework.web.reactive.function.client.DefaultClientResponse)
        <org.springframework.web.reactive.function.client.DefaultClientResponse.access$100(org.springframework.web.reactive.function.client.DefaultClientResponse) - took 0.04 ms
        >org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.messageReaders()
        <org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.messageReaders() - took 0.03 ms
       <org.springframework.web.reactive.function.client.DefaultClientResponse$1.messageReaders() - took 0.17 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.codec.ByteArrayDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.core.ResolvableType.getRawClass()
          <org.springframework.core.ResolvableType.getRawClass() - took 0.04 ms
          >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
           >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
            >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.08 ms
            <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.12 ms
           <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.18 ms
          <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.55 ms
         <org.springframework.core.codec.ByteArrayDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.68 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.75 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.82 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.codec.ByteBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.core.ResolvableType.getRawClass()
          <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
          >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
           >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
            >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
            <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.11 ms
           <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.15 ms
          <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.21 ms
         <org.springframework.core.codec.ByteBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.32 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.36 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.41 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.codec.DataBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.core.ResolvableType.getRawClass()
          <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
          >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
           >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
            >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
            <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.12 ms
           <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.16 ms
          <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.21 ms
         <org.springframework.core.codec.DataBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.32 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.36 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.40 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.codec.ResourceDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.core.ResolvableType.getRawClass()
          <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
         <org.springframework.core.codec.ResourceDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.09 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.14 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.18 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
           >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
            >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.02 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
             >org.springframework.util.MimeType.getType()
             <org.springframework.util.MimeType.getType() - took 0.02 ms
             >org.springframework.util.MimeType.getType()
             <org.springframework.util.MimeType.getType() - took 0.02 ms
            <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.27 ms
           <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.31 ms
          <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.37 ms
         <org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.41 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.45 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.49 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.FormHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType)
          >org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType,java.util.Map)
           >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
           <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
           >org.springframework.core.ResolvableType.isArray()
            >org.springframework.core.ResolvableType.resolveType()
             >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
             <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
             >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
              >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
               >org.springframework.core.ResolvableType.resolveClass()
               <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
              <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.07 ms
             <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.11 ms
            <org.springframework.core.ResolvableType.resolveType() - took 0.19 ms
            >org.springframework.core.ResolvableType.isArray()
             >org.springframework.core.ResolvableType.resolveType()
             <org.springframework.core.ResolvableType.resolveType() - took 0.03 ms
             >org.springframework.core.ResolvableType.isArray()
             <org.springframework.core.ResolvableType.isArray() - took 0.03 ms
            <org.springframework.core.ResolvableType.isArray() - took 0.12 ms
           <org.springframework.core.ResolvableType.isArray() - took 0.37 ms
           >org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType)
            >org.springframework.core.ResolvableType.getType()
             >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
             <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
            <org.springframework.core.ResolvableType.getType() - took 0.09 ms
            >org.springframework.core.ResolvableType.resolveType()
             >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
             <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.05 ms
             >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
              >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
               >org.springframework.core.ResolvableType.resolveClass()
               <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
              <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.07 ms
             <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.12 ms
            <org.springframework.core.ResolvableType.resolveType() - took 0.22 ms
            >org.springframework.core.ResolvableType.getType()
             >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
             <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
            <org.springframework.core.ResolvableType.getType() - took 0.07 ms
            >org.springframework.core.ResolvableType.resolveType()
            <org.springframework.core.ResolvableType.resolveType() - took 0.03 ms
            >org.springframework.core.ResolvableType.getType()
             >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
             <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
            <org.springframework.core.ResolvableType.getType() - took 0.07 ms
           <org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType) - took 0.64 ms
           >org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType)
            >org.springframework.core.ResolvableType.getType()
             >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
             <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
            <org.springframework.core.ResolvableType.getType() - took 0.07 ms
            >org.springframework.core.ResolvableType.resolveType()
            <org.springframework.core.ResolvableType.resolveType() - took 0.03 ms
            >org.springframework.core.ResolvableType.getType()
             >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
             <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
            <org.springframework.core.ResolvableType.getType() - took 0.07 ms
           <org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType) - took 0.23 ms
           >org.springframework.core.ResolvableType.resolve(java.lang.Class)
           <org.springframework.core.ResolvableType.resolve(java.lang.Class) - took 0.03 ms
           >org.springframework.core.ResolvableType.resolve(java.lang.Class)
           <org.springframework.core.ResolvableType.resolve(java.lang.Class) - took 0.03 ms
           >org.springframework.util.ClassUtils.isAssignable(java.lang.Class,java.lang.Class)
            >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
            <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
            >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
            <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
           <org.springframework.util.ClassUtils.isAssignable(java.lang.Class,java.lang.Class) - took 0.14 ms
          <org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType,java.util.Map) - took 5.14 ms
         <org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType) - took 5.23 ms
         >org.springframework.core.ResolvableType.hasUnresolvableGenerics()
          >org.springframework.core.ResolvableType.getGenerics()
           >org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class)
           <org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class) - took 0.07 ms
           >org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver)
           <org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver) - took 0.03 ms
          <org.springframework.core.ResolvableType.getGenerics() - took 0.17 ms
          >org.springframework.core.ResolvableType.resolve()
          <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
          >org.springframework.core.ResolvableType.forClass(java.lang.Class)
          <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
          >org.springframework.core.ResolvableType.hasGenerics()
           >org.springframework.core.ResolvableType.getGenerics()
            >org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class)
            <org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class) - took 0.03 ms
            >org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver)
            <org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver) - took 0.03 ms
           <org.springframework.core.ResolvableType.getGenerics() - took 0.13 ms
          <org.springframework.core.ResolvableType.hasGenerics() - took 0.17 ms
          >org.springframework.core.ResolvableType.forClass(java.lang.Class)
          <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
          >org.springframework.core.ResolvableType.hasGenerics()
           >org.springframework.core.ResolvableType.getGenerics()
            >org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class)
            <org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class) - took 0.03 ms
            >org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver)
            <org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver) - took 0.03 ms
           <org.springframework.core.ResolvableType.getGenerics() - took 0.11 ms
          <org.springframework.core.ResolvableType.hasGenerics() - took 0.15 ms
          >org.springframework.core.ResolvableType.getSuperType()
           >org.springframework.core.ResolvableType.resolve()
           <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
           >org.springframework.core.SerializableTypeWrapper.forGenericSuperclass(java.lang.Class)
            >org.springframework.core.SerializableTypeWrapper.forTypeProvider(org.springframework.core.SerializableTypeWrapper$TypeProvider)
            <org.springframework.core.SerializableTypeWrapper.forTypeProvider(org.springframework.core.SerializableTypeWrapper$TypeProvider) - took 0.09 ms
           <org.springframework.core.SerializableTypeWrapper.forGenericSuperclass(java.lang.Class) - took 2.52 ms
           >org.springframework.core.ResolvableType.asVariableResolver()
           <org.springframework.core.ResolvableType.asVariableResolver() - took 1.38 ms
           >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
            >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
             >org.springframework.core.ResolvableType.resolveClass()
             <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
            <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.09 ms
           <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.14 ms
          <org.springframework.core.ResolvableType.getSuperType() - took 4.18 ms
          >org.springframework.core.ResolvableType.hasUnresolvableGenerics()
           >org.springframework.core.ResolvableType.getGenerics()
            >org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class)
            <org.springframework.core.SerializableTypeWrapper.forTypeParameters(java.lang.Class) - took 0.03 ms
            >org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver)
            <org.springframework.core.ResolvableType.forTypes(java.lang.reflect.Type[],org.springframework.core.ResolvableType$VariableResolver) - took 0.03 ms
           <org.springframework.core.ResolvableType.getGenerics() - took 0.12 ms
           >org.springframework.core.ResolvableType.resolve()
           <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
           >org.springframework.core.ResolvableType.getSuperType()
            >org.springframework.core.ResolvableType.resolve()
            <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
           <org.springframework.core.ResolvableType.getSuperType() - took 0.07 ms
           >org.springframework.core.ResolvableType.hasUnresolvableGenerics()
           <org.springframework.core.ResolvableType.hasUnresolvableGenerics() - took 0.03 ms
          <org.springframework.core.ResolvableType.hasUnresolvableGenerics() - took 0.33 ms
         <org.springframework.core.ResolvableType.hasUnresolvableGenerics() - took 5.27 ms
        <org.springframework.http.codec.FormHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 10.58 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 10.63 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.http.codec.json.AbstractJackson2Decoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.http.codec.json.Jackson2CodecSupport.getObjectMapper()
          <org.springframework.http.codec.json.Jackson2CodecSupport.getObjectMapper() - took 0.03 ms
          >org.springframework.core.ResolvableType.getType()
           >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
           <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
          <org.springframework.core.ResolvableType.getType() - took 0.07 ms
          >org.springframework.core.ResolvableType.resolve(java.lang.Class)
          <org.springframework.core.ResolvableType.resolve(java.lang.Class) - took 0.04 ms
         <org.springframework.http.codec.json.AbstractJackson2Decoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.75 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.81 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.85 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.ServerSentEventHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.http.MediaType.includes(org.springframework.http.MediaType)
          >org.springframework.util.MimeType.includes(org.springframework.util.MimeType)
           >org.springframework.util.MimeType.isWildcardType()
            >org.springframework.util.MimeType.getType()
            <org.springframework.util.MimeType.getType() - took 0.03 ms
           <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
           >org.springframework.util.MimeType.getType()
           <org.springframework.util.MimeType.getType() - took 0.03 ms
           >org.springframework.util.MimeType.getType()
           <org.springframework.util.MimeType.getType() - took 0.02 ms
          <org.springframework.util.MimeType.includes(org.springframework.util.MimeType) - took 0.19 ms
         <org.springframework.http.MediaType.includes(org.springframework.http.MediaType) - took 0.24 ms
         >org.springframework.http.codec.ServerSentEventHttpMessageReader.isServerSentEvent(org.springframework.core.ResolvableType)
          >org.springframework.core.ResolvableType.getRawClass()
          <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
         <org.springframework.http.codec.ServerSentEventHttpMessageReader.isServerSentEvent(org.springframework.core.ResolvableType) - took 0.09 ms
        <org.springframework.http.codec.ServerSentEventHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.41 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.46 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
         >org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
          >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
           >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
            >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
             >org.springframework.util.MimeType.getType()
             <org.springframework.util.MimeType.getType() - took 0.03 ms
             >org.springframework.util.MimeType.getType()
             <org.springframework.util.MimeType.getType() - took 0.04 ms
            <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.28 ms
           <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.32 ms
           >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
            >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.04 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.10 ms
            <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.16 ms
           <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.20 ms
          <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.60 ms
          >org.springframework.core.ResolvableType.getRawClass()
          <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
         <org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.70 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.74 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$18(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.78 ms
       >org.springframework.web.reactive.function.BodyExtractors.cast(org.springframework.http.codec.HttpMessageReader)
       <org.springframework.web.reactive.function.BodyExtractors.cast(org.springframework.http.codec.HttpMessageReader) - took 0.05 ms
       >org.springframework.web.reactive.function.BodyExtractors.lambda$null$0(org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.http.ReactiveHttpInputMessage,org.springframework.core.ResolvableType,org.springframework.http.codec.HttpMessageReader)
        >org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse()
        <org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse() - took 0.04 ms
        >org.springframework.web.reactive.function.client.DefaultClientResponse$1.hints()
        <org.springframework.web.reactive.function.client.DefaultClientResponse$1.hints() - took 0.04 ms
        >org.springframework.http.codec.DecoderHttpMessageReader.readMono(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,java.util.Map)
         >org.springframework.http.codec.DecoderHttpMessageReader.getContentType(org.springframework.http.HttpMessage)
          >org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders()
           >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
            >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
              >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
               >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
               <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.13 ms
             >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
             <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
             >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object)
              >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object)
               >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
               <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
               >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
                >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
                <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
               <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.07 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object) - took 0.20 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object) - took 0.24 ms
            <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.47 ms
           <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.53 ms
           >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
            >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
              >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
               >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
               <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.11 ms
             >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
             <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
             >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object)
              >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object)
               >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
               <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.08 ms
               >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
                >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
                <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.05 ms
               <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.10 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object) - took 0.25 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object) - took 0.30 ms
            <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.53 ms
           <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.58 ms
           >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
            >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
              >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
               >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
               <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.11 ms
             >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
             <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
             >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object)
              >org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object)
               >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
               <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
               >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
                >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
                <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
               <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.07 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.String,java.lang.Object) - took 0.19 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.put(java.lang.Object,java.lang.Object) - took 0.23 ms
            <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.44 ms
           <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.49 ms
          <org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders() - took 1.69 ms
          >org.springframework.http.HttpHeaders.getContentType()
           >org.springframework.http.HttpHeaders.getFirst(java.lang.String)
            >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
             >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
              >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
              <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.12 ms
           <org.springframework.http.HttpHeaders.getFirst(java.lang.String) - took 0.15 ms
           >org.springframework.util.StringUtils.hasLength(java.lang.String)
           <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
           >org.springframework.http.MediaType.parseMediaType(java.lang.String)
            >org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String)
             >org.springframework.util.StringUtils.hasLength(java.lang.String)
             <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
             >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
              >org.springframework.util.StringUtils.hasLength(java.lang.String)
              <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.02 ms
             <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
             >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
              >org.springframework.util.StringUtils.hasLength(java.lang.String)
              <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
             <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
             >org.springframework.util.MimeType.checkToken(java.lang.String)
             <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.04 ms
             >org.springframework.util.MimeType.checkToken(java.lang.String)
             <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
             >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
             <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
            <org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String) - took 0.41 ms
            >org.springframework.util.MimeType.getType()
            <org.springframework.util.MimeType.getType() - took 0.03 ms
            >org.springframework.util.MimeType.getSubtype()
            <org.springframework.util.MimeType.getSubtype() - took 0.03 ms
            >org.springframework.util.MimeType.getParameters()
            <org.springframework.util.MimeType.getParameters() - took 0.03 ms
            >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
             >org.springframework.util.StringUtils.hasLength(java.lang.String)
             <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.02 ms
            <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
            >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
             >org.springframework.util.StringUtils.hasLength(java.lang.String)
             <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.06 ms
            <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.11 ms
            >org.springframework.util.MimeType.checkToken(java.lang.String)
            <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
            >org.springframework.util.MimeType.checkToken(java.lang.String)
            <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
            >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
            <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
           <org.springframework.http.MediaType.parseMediaType(java.lang.String) - took 0.91 ms
          <org.springframework.http.HttpHeaders.getContentType() - took 1.16 ms
         <org.springframework.http.codec.DecoderHttpMessageReader.getContentType(org.springframework.http.HttpMessage) - took 2.92 ms
         >org.springframework.http.client.reactive.ReactorClientHttpResponse.getBody()
         <org.springframework.http.client.reactive.ReactorClientHttpResponse.getBody() - took 1.59 ms
         >org.springframework.core.codec.AbstractDataBufferDecoder.decodeToMono(org.reactivestreams.Publisher,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)
          >org.springframework.core.io.buffer.DataBufferUtils.join(org.reactivestreams.Publisher)
           >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
           <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
          <org.springframework.core.io.buffer.DataBufferUtils.join(org.reactivestreams.Publisher) - took 0.66 ms
         <org.springframework.core.codec.AbstractDataBufferDecoder.decodeToMono(org.reactivestreams.Publisher,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map) - took 19.73 ms
        <org.springframework.http.codec.DecoderHttpMessageReader.readMono(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,java.util.Map) - took 24.37 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$null$0(org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.http.ReactiveHttpInputMessage,org.springframework.core.ResolvableType,org.springframework.http.codec.HttpMessageReader) - took 24.53 ms
      <org.springframework.web.reactive.function.BodyExtractors.readWithMessageReaders(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,java.util.function.Function,java.util.function.Function,java.util.function.Supplier) - took 45.37 ms
     <org.springframework.web.reactive.function.BodyExtractors.lambda$toMono$2(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context) - took 46.33 ms
    <org.springframework.web.reactive.function.client.DefaultClientResponse.body(org.springframework.web.reactive.function.BodyExtractor) - took 47.78 ms
   <org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(java.lang.Class) - took 76.43 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToPublisher(org.springframework.web.reactive.function.client.ClientResponse,org.reactivestreams.Publisher,java.util.function.Function)
    >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToPublisher$4(org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler)
     >org.springframework.web.reactive.function.client.DefaultClientResponse.statusCode()
      >org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode()
       >org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode()
       <org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode() - took 0.04 ms
       >org.springframework.http.HttpStatus.valueOf(int)
        >org.springframework.http.HttpStatus.resolve(int)
         >org.springframework.http.HttpStatus.values()
         <org.springframework.http.HttpStatus.values() - took 0.05 ms
        <org.springframework.http.HttpStatus.resolve(int) - took 0.10 ms
       <org.springframework.http.HttpStatus.valueOf(int) - took 0.15 ms
      <org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode() - took 0.49 ms
     <org.springframework.web.reactive.function.client.DefaultClientResponse.statusCode() - took 0.55 ms
     >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler.test(org.springframework.http.HttpStatus)
      >org.springframework.http.HttpStatus.isError()
       >org.springframework.http.HttpStatus.is4xxClientError()
        >org.springframework.http.HttpStatus.series()
         >org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus)
          >org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus)
          <org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus) - took 0.03 ms
          >org.springframework.http.HttpStatus$Series.valueOf(int)
           >org.springframework.http.HttpStatus$Series.values()
           <org.springframework.http.HttpStatus$Series.values() - took 0.05 ms
          <org.springframework.http.HttpStatus$Series.valueOf(int) - took 0.10 ms
         <org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus) - took 0.23 ms
        <org.springframework.http.HttpStatus.series() - took 0.31 ms
       <org.springframework.http.HttpStatus.is4xxClientError() - took 2.80 ms
       >org.springframework.http.HttpStatus.is5xxServerError()
        >org.springframework.http.HttpStatus.series()
         >org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus)
          >org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus)
          <org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus) - took 0.04 ms
          >org.springframework.http.HttpStatus$Series.valueOf(int)
           >org.springframework.http.HttpStatus$Series.values()
           <org.springframework.http.HttpStatus$Series.values() - took 0.03 ms
          <org.springframework.http.HttpStatus$Series.valueOf(int) - took 0.08 ms
         <org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus) - took 0.20 ms
        <org.springframework.http.HttpStatus.series() - took 0.24 ms
       <org.springframework.http.HttpStatus.is5xxServerError() - took 0.29 ms
      <org.springframework.http.HttpStatus.isError() - took 3.15 ms
     <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler.test(org.springframework.http.HttpStatus) - took 3.22 ms
    <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToPublisher$4(org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler) - took 3.84 ms
   <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToPublisher(org.springframework.web.reactive.function.client.ClientResponse,org.reactivestreams.Publisher,java.util.function.Function) - took 4.77 ms
  <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToMono$0(java.lang.Class,org.springframework.web.reactive.function.client.ClientResponse) - took 81.51 ms
  >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getBody$0(io.netty.buffer.ByteBuf)
   >org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(io.netty.buffer.ByteBuf)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.12 ms
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
   <org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(io.netty.buffer.ByteBuf) - took 19.14 ms
  <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getBody$0(io.netty.buffer.ByteBuf) - took 19.25 ms
  >org.springframework.core.io.buffer.DataBufferUtils.lambda$join$16(java.util.List)
  <org.springframework.core.io.buffer.DataBufferUtils.lambda$join$16(java.util.List) - took 0.05 ms
  >org.springframework.core.io.buffer.DataBufferUtils.lambda$join$17(java.util.List)
   >org.springframework.core.io.buffer.NettyDataBuffer.factory()
    >org.springframework.core.io.buffer.NettyDataBuffer.factory()
    <org.springframework.core.io.buffer.NettyDataBuffer.factory() - took 0.03 ms
   <org.springframework.core.io.buffer.NettyDataBuffer.factory() - took 0.09 ms
   >org.springframework.core.io.buffer.NettyDataBufferFactory.join(java.util.List)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object)
     >org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)
      >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
      <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.05 ms
     <org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String) - took 0.12 ms
    <org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object) - took 0.21 ms
    >org.springframework.core.io.buffer.NettyDataBuffer.getNativeBuffer()
    <org.springframework.core.io.buffer.NettyDataBuffer.getNativeBuffer() - took 0.03 ms
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
   <org.springframework.core.io.buffer.NettyDataBufferFactory.join(java.util.List) - took 2.79 ms
  <org.springframework.core.io.buffer.DataBufferUtils.lambda$join$17(java.util.List) - took 2.96 ms
  >org.springframework.core.codec.AbstractDataBufferDecoder.lambda$decodeToMono$1(org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map,org.springframework.core.io.buffer.DataBuffer)
   >org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)
    >org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)
     >org.springframework.core.codec.StringDecoder.getCharset(org.springframework.util.MimeType)
      >org.springframework.util.MimeType.getCharset()
       >org.springframework.util.MimeType.getParameter(java.lang.String)
       <org.springframework.util.MimeType.getParameter(java.lang.String) - took 0.04 ms
      <org.springframework.util.MimeType.getCharset() - took 0.08 ms
     <org.springframework.core.codec.StringDecoder.getCharset(org.springframework.util.MimeType) - took 0.13 ms
     >org.springframework.core.io.buffer.NettyDataBuffer.asByteBuffer()
     <org.springframework.core.io.buffer.NettyDataBuffer.asByteBuffer() - took 0.07 ms
     >org.springframework.core.io.buffer.DataBufferUtils.release(org.springframework.core.io.buffer.DataBuffer)
      >org.springframework.core.io.buffer.NettyDataBuffer.release()
      <org.springframework.core.io.buffer.NettyDataBuffer.release() - took 0.08 ms
     <org.springframework.core.io.buffer.DataBufferUtils.release(org.springframework.core.io.buffer.DataBuffer) - took 0.15 ms
    <org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map) - took 0.99 ms
   <org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map) - took 1.05 ms
  <org.springframework.core.codec.AbstractDataBufferDecoder.lambda$decodeToMono$1(org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map,org.springframework.core.io.buffer.DataBuffer) - took 1.09 ms
block(): 509 ms