
  >org.springframework.web.reactive.function.client.DefaultWebClient.get()
   >org.springframework.http.HttpMethod.values()
   <org.springframework.http.HttpMethod.values() - took 0.12 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient.methodInternal(org.springframework.http.HttpMethod)
   <org.springframework.web.reactive.function.client.DefaultWebClient.methodInternal(org.springframework.http.HttpMethod) - took 7.69 ms
  <org.springframework.web.reactive.function.client.DefaultWebClient.get() - took 9.83 ms
  >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
  <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.08 ms
  >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
  <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$400(org.springframework.web.reactive.function.client.DefaultWebClient)
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$400(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.04 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$100(org.springframework.web.reactive.function.client.DefaultWebClient)
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$100(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
  >org.springframework.web.util.DefaultUriBuilderFactory.expand(java.lang.String,java.lang.Object[])
   >org.springframework.web.util.DefaultUriBuilderFactory.uriString(java.lang.String)
    >org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.initUriComponentsBuilder(java.lang.String)
     >org.springframework.util.StringUtils.isEmpty(java.lang.Object)
     <org.springframework.util.StringUtils.isEmpty(java.lang.Object) - took 0.04 ms
     >org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory)
     <org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.05 ms
     >org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory)
     <org.springframework.web.util.DefaultUriBuilderFactory.access$000(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
     >org.springframework.web.util.UriComponentsBuilder.cloneBuilder()
      >org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.cloneBuilder()
       >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder()
        >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder()
         >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.append(java.lang.String)
         <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.append(java.lang.String) - took 0.03 ms
        <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder() - took 0.08 ms
       <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.cloneBuilder() - took 0.13 ms
      <org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.cloneBuilder() - took 0.27 ms
      >org.springframework.util.LinkedMultiValueMap.putAll(java.util.Map)
       >org.springframework.util.LinkedMultiValueMap.size()
       <org.springframework.util.LinkedMultiValueMap.size() - took 0.05 ms
      <org.springframework.util.LinkedMultiValueMap.putAll(java.util.Map) - took 0.13 ms
     <org.springframework.web.util.UriComponentsBuilder.cloneBuilder() - took 0.51 ms
    <org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.initUriComponentsBuilder(java.lang.String) - took 0.83 ms
   <org.springframework.web.util.DefaultUriBuilderFactory.uriString(java.lang.String) - took 8.37 ms
   >org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(java.lang.Object[])
    >org.springframework.util.ObjectUtils.isEmpty(java.lang.Object[])
    <org.springframework.util.ObjectUtils.isEmpty(java.lang.Object[]) - took 0.03 ms
    >org.springframework.web.util.DefaultUriBuilderFactory.access$300(org.springframework.web.util.DefaultUriBuilderFactory)
    <org.springframework.web.util.DefaultUriBuilderFactory.access$300(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
    >org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory)
    <org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
    >org.springframework.web.util.UriComponentsBuilder.build()
     >org.springframework.web.util.UriComponentsBuilder.build(boolean)
      >org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.build()
       >org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.build()
       <org.springframework.web.util.UriComponentsBuilder$FullPathComponentBuilder.build() - took 2.32 ms
      <org.springframework.web.util.UriComponentsBuilder$CompositePathComponentBuilder.build() - took 2.41 ms
      >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
       >org.springframework.util.LinkedMultiValueMap.size()
       <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
       >org.springframework.util.LinkedMultiValueMap.entrySet()
       <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.03 ms
       >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
        >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
        <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.05 ms
       <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.09 ms
      <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.28 ms
     <org.springframework.web.util.UriComponentsBuilder.build(boolean) - took 2.76 ms
    <org.springframework.web.util.UriComponentsBuilder.build() - took 2.80 ms
    >org.springframework.web.util.UriComponents.expand(java.lang.Object[])
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
     >org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)
      >org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables)
       >org.springframework.util.Assert.state(boolean,java.lang.String)
       <org.springframework.util.Assert.state(boolean,java.lang.String) - took 0.03 ms
       >org.springframework.web.util.UriComponents.getScheme()
       <org.springframework.web.util.UriComponents.getScheme() - took 0.03 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.04 ms
       >org.springframework.web.util.UriComponents.getFragment()
       <org.springframework.web.util.UriComponents.getFragment() - took 0.03 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.03 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.03 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.03 ms
       >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
       <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.03 ms
       >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.expand(org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
        >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath()
        <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath() - took 0.04 ms
        >org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator)
        <org.springframework.web.util.UriComponents.expandUriComponent(java.lang.String,org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.04 ms
       <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.expand(org.springframework.web.util.UriComponents$UriTemplateVariables,java.util.function.UnaryOperator) - took 0.16 ms
       >org.springframework.web.util.HierarchicalUriComponents.expandQueryParams(org.springframework.web.util.UriComponents$UriTemplateVariables)
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.size()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.size() - took 0.04 ms
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.entrySet()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.entrySet() - took 0.08 ms
        >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
         >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
         <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
         >org.springframework.util.LinkedMultiValueMap.size()
         <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
         >org.springframework.util.LinkedMultiValueMap.entrySet()
         <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.03 ms
         >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
          >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
          <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
         <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.07 ms
        <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.26 ms
       <org.springframework.web.util.HierarchicalUriComponents.expandQueryParams(org.springframework.web.util.UriComponents$UriTemplateVariables) - took 1.94 ms
      <org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables) - took 2.57 ms
     <org.springframework.web.util.HierarchicalUriComponents.expandInternal(org.springframework.web.util.UriComponents$UriTemplateVariables) - took 2.66 ms
    <org.springframework.web.util.UriComponents.expand(java.lang.Object[]) - took 3.75 ms
    >org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.createUri(org.springframework.web.util.UriComponents)
     >org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory)
     <org.springframework.web.util.DefaultUriBuilderFactory.access$100(org.springframework.web.util.DefaultUriBuilderFactory) - took 0.03 ms
     >org.springframework.web.util.UriComponents.toString()
      >org.springframework.web.util.HierarchicalUriComponents.toUriString()
       >org.springframework.web.util.UriComponents.getScheme()
       <org.springframework.web.util.UriComponents.getScheme() - took 0.03 ms
       >org.springframework.web.util.UriComponents.getScheme()
       <org.springframework.web.util.UriComponents.getScheme() - took 0.03 ms
       >org.springframework.web.util.HierarchicalUriComponents.getPort()
       <org.springframework.web.util.HierarchicalUriComponents.getPort() - took 0.05 ms
       >org.springframework.web.util.HierarchicalUriComponents.getPath()
        >org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath()
        <org.springframework.web.util.HierarchicalUriComponents$FullPathComponent.getPath() - took 0.03 ms
       <org.springframework.web.util.HierarchicalUriComponents.getPath() - took 0.07 ms
       >org.springframework.util.StringUtils.hasLength(java.lang.String)
       <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
       >org.springframework.web.util.HierarchicalUriComponents.getQuery()
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty() - took 0.05 ms
       <org.springframework.web.util.HierarchicalUriComponents.getQuery() - took 0.09 ms
       >org.springframework.web.util.UriComponents.getFragment()
       <org.springframework.web.util.UriComponents.getFragment() - took 0.03 ms
      <org.springframework.web.util.HierarchicalUriComponents.toUriString() - took 0.47 ms
     <org.springframework.web.util.UriComponents.toString() - took 0.51 ms
    <org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.createUri(org.springframework.web.util.UriComponents) - took 0.63 ms
   <org.springframework.web.util.DefaultUriBuilderFactory$DefaultUriBuilder.build(java.lang.Object[]) - took 7.44 ms
  <org.springframework.web.util.DefaultUriBuilderFactory.expand(java.lang.String,java.lang.Object[]) - took 15.88 ms
  >org.springframework.web.reactive.function.client.ClientRequest.create(org.springframework.http.HttpMethod,java.net.URI)
   >org.springframework.web.reactive.function.BodyInserters.empty()
   <org.springframework.web.reactive.function.BodyInserters.empty() - took 0.10 ms
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.07 ms
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
  <org.springframework.web.reactive.function.client.ClientRequest.create(org.springframework.http.HttpMethod,java.net.URI) - took 3.97 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.headers(java.util.function.Consumer)
   >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
   <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient.access$500(org.springframework.web.reactive.function.client.DefaultWebClient)
   <org.springframework.web.reactive.function.client.DefaultWebClient.access$500(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
   >org.springframework.http.HttpHeaders.addAll(org.springframework.util.MultiValueMap)
    >org.springframework.http.HttpHeaders.entrySet()
     >org.springframework.util.LinkedCaseInsensitiveMap.entrySet()
     <org.springframework.util.LinkedCaseInsensitiveMap.entrySet() - took 0.03 ms
    <org.springframework.http.HttpHeaders.entrySet() - took 0.10 ms
   <org.springframework.http.HttpHeaders.addAll(org.springframework.util.MultiValueMap) - took 0.66 ms
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.headers(java.util.function.Consumer) - took 0.88 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.cookies(java.util.function.Consumer)
   >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
   <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultWebClient.access$600(org.springframework.web.reactive.function.client.DefaultWebClient)
   <org.springframework.web.reactive.function.client.DefaultWebClient.access$600(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
   >org.springframework.util.LinkedMultiValueMap.addAll(org.springframework.util.MultiValueMap)
    >org.springframework.util.LinkedMultiValueMap.entrySet()
    <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.03 ms
   <org.springframework.util.LinkedMultiValueMap.addAll(org.springframework.util.MultiValueMap) - took 0.09 ms
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.cookies(java.util.function.Consumer) - took 0.25 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.attributes(java.util.function.Consumer)
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.attributes(java.util.function.Consumer) - took 0.05 ms
  >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.build()
   >org.springframework.http.HttpHeaders.readOnlyHttpHeaders(org.springframework.http.HttpHeaders)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.http.HttpHeaders.size()
     >org.springframework.util.LinkedCaseInsensitiveMap.size()
     <org.springframework.util.LinkedCaseInsensitiveMap.size() - took 0.03 ms
    <org.springframework.http.HttpHeaders.size() - took 0.07 ms
    >org.springframework.http.HttpHeaders.entrySet()
     >org.springframework.util.LinkedCaseInsensitiveMap.entrySet()
     <org.springframework.util.LinkedCaseInsensitiveMap.entrySet() - took 0.03 ms
    <org.springframework.http.HttpHeaders.entrySet() - took 0.07 ms
   <org.springframework.http.HttpHeaders.readOnlyHttpHeaders(org.springframework.http.HttpHeaders) - took 0.34 ms
   >org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap)
    >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
    <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    >org.springframework.util.LinkedMultiValueMap.size()
    <org.springframework.util.LinkedMultiValueMap.size() - took 0.03 ms
    >org.springframework.util.LinkedMultiValueMap.entrySet()
    <org.springframework.util.LinkedMultiValueMap.entrySet() - took 0.03 ms
    >org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map)
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    <org.springframework.util.CollectionUtils.toMultiValueMap(java.util.Map) - took 0.07 ms
   <org.springframework.util.CollectionUtils.unmodifiableMultiValueMap(org.springframework.util.MultiValueMap) - took 0.23 ms
   >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.lambda$new$0(java.lang.String)
    >org.springframework.util.ObjectUtils.getIdentityHexString(java.lang.Object)
    <org.springframework.util.ObjectUtils.getIdentityHexString(java.lang.Object) - took 0.04 ms
   <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.lambda$new$0(java.lang.String) - took 0.12 ms
  <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.build() - took 5.22 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$300(org.springframework.web.reactive.function.client.DefaultWebClient)
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$300(org.springframework.web.reactive.function.client.DefaultWebClient) - took 0.03 ms
  >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(org.springframework.web.reactive.function.client.ClientRequest)
   >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
   <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.method()
   <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.method() - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.url()
   <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.url() - took 0.03 ms
   >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.logPrefix()
   <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.logPrefix() - took 0.03 ms
   >org.springframework.http.client.reactive.ReactorClientHttpConnector.connect(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function)
    >reactor.netty.http.client.HttpClient.request(io.netty.handler.codec.http.HttpMethod)
     >reactor.netty.http.client.HttpClientHeaders.tcpConfiguration()
      >reactor.netty.http.client.HttpClientTcpConfig.tcpConfiguration()
       >reactor.netty.http.client.HttpClientConnect.tcpConfiguration()
       <reactor.netty.http.client.HttpClientConnect.tcpConfiguration() - took 0.04 ms
       >reactor.netty.http.client.HttpClient.lambda$static$8(reactor.netty.tcp.TcpClient)
       <reactor.netty.http.client.HttpClient.lambda$static$8(reactor.netty.tcp.TcpClient) - took 4.69 ms
      <reactor.netty.http.client.HttpClientTcpConfig.tcpConfiguration() - took 4.86 ms
     <reactor.netty.http.client.HttpClientHeaders.tcpConfiguration() - took 4.93 ms
    <reactor.netty.http.client.HttpClient.request(io.netty.handler.codec.http.HttpMethod) - took 8.46 ms
    >reactor.netty.http.client.HttpClientFinalizer.uri(java.lang.String)
     >reactor.netty.http.client.HttpClientFinalizer.uri(java.lang.String)
     <reactor.netty.http.client.HttpClientFinalizer.uri(java.lang.String) - took 0.27 ms
    <reactor.netty.http.client.HttpClientFinalizer.uri(java.lang.String) - took 0.33 ms
    >reactor.netty.http.client.HttpClientFinalizer.send(java.util.function.BiFunction)
     >reactor.netty.http.client.HttpClientFinalizer.send(java.util.function.BiFunction)
     <reactor.netty.http.client.HttpClientFinalizer.send(java.util.function.BiFunction) - took 0.25 ms
    <reactor.netty.http.client.HttpClientFinalizer.send(java.util.function.BiFunction) - took 0.32 ms
    >reactor.netty.http.client.HttpClientFinalizer.responseConnection(java.util.function.BiFunction)
     >reactor.netty.http.client.HttpClientFinalizer.connect()
      >reactor.netty.http.client.HttpClientConnect$HttpTcpClient.configure()
      <reactor.netty.http.client.HttpClientConnect$HttpTcpClient.configure() - took 0.24 ms
      >reactor.netty.http.client.HttpClientConfiguration.lambda$static$0(io.netty.bootstrap.Bootstrap)
       >reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap)
       <reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap) - took 0.07 ms
      <reactor.netty.http.client.HttpClientConfiguration.lambda$static$0(io.netty.bootstrap.Bootstrap) - took 0.15 ms
      >reactor.netty.http.client.HttpClientHeaders.apply(java.lang.Object)
       >reactor.netty.http.client.HttpClientHeaders.apply(io.netty.bootstrap.Bootstrap)
        >reactor.netty.http.client.HttpClientConfiguration.headers(io.netty.bootstrap.Bootstrap)
        <reactor.netty.http.client.HttpClientConfiguration.headers(io.netty.bootstrap.Bootstrap) - took 0.05 ms
        >reactor.netty.http.client.HttpClient.lambda$static$14(io.netty.handler.codec.http.HttpHeaders)
        <reactor.netty.http.client.HttpClient.lambda$static$14(io.netty.handler.codec.http.HttpHeaders) - took 1.43 ms
        >reactor.netty.http.client.HttpClientConfiguration.headers(io.netty.bootstrap.Bootstrap,io.netty.handler.codec.http.HttpHeaders)
         >reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap)
         <reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap) - took 0.08 ms
        <reactor.netty.http.client.HttpClientConfiguration.headers(io.netty.bootstrap.Bootstrap,io.netty.handler.codec.http.HttpHeaders) - took 0.13 ms
       <reactor.netty.http.client.HttpClientHeaders.apply(io.netty.bootstrap.Bootstrap) - took 8.19 ms
      <reactor.netty.http.client.HttpClientHeaders.apply(java.lang.Object) - took 8.24 ms
      >reactor.netty.http.client.HttpClient.lambda$request$4(io.netty.handler.codec.http.HttpMethod,io.netty.bootstrap.Bootstrap)
       >reactor.netty.http.client.HttpClientConfiguration.method(io.netty.bootstrap.Bootstrap,io.netty.handler.codec.http.HttpMethod)
        >reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap)
        <reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap) - took 0.03 ms
       <reactor.netty.http.client.HttpClientConfiguration.method(io.netty.bootstrap.Bootstrap,io.netty.handler.codec.http.HttpMethod) - took 0.09 ms
      <reactor.netty.http.client.HttpClient.lambda$request$4(io.netty.handler.codec.http.HttpMethod,io.netty.bootstrap.Bootstrap) - took 0.14 ms
      >reactor.netty.http.client.HttpClientFinalizer.lambda$uri$0(java.lang.String,io.netty.bootstrap.Bootstrap)
       >reactor.netty.http.client.HttpClientConfiguration.uri(io.netty.bootstrap.Bootstrap,java.lang.String)
        >reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap)
        <reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap) - took 0.05 ms
       <reactor.netty.http.client.HttpClientConfiguration.uri(io.netty.bootstrap.Bootstrap,java.lang.String) - took 0.09 ms
      <reactor.netty.http.client.HttpClientFinalizer.lambda$uri$0(java.lang.String,io.netty.bootstrap.Bootstrap) - took 0.13 ms
      >reactor.netty.http.client.HttpClientFinalizer.lambda$send$8(java.util.function.BiFunction,io.netty.bootstrap.Bootstrap)
       >reactor.netty.http.client.HttpClientConfiguration.body(io.netty.bootstrap.Bootstrap,java.util.function.BiFunction)
        >reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap)
        <reactor.netty.http.client.HttpClientConfiguration.getOrCreate(io.netty.bootstrap.Bootstrap) - took 0.06 ms
       <reactor.netty.http.client.HttpClientConfiguration.body(io.netty.bootstrap.Bootstrap,java.util.function.BiFunction) - took 0.15 ms
      <reactor.netty.http.client.HttpClientFinalizer.lambda$send$8(java.util.function.BiFunction,io.netty.bootstrap.Bootstrap) - took 0.23 ms
      >reactor.netty.http.client.HttpClientConnect$HttpTcpClient.connect(io.netty.bootstrap.Bootstrap)
       >reactor.netty.http.client.HttpClientConnect.channelFactoryAndLoops(io.netty.bootstrap.Bootstrap)
        >reactor.netty.http.HttpResources.get()
        <reactor.netty.http.HttpResources.get() - took 0.03 ms
       <reactor.netty.http.client.HttpClientConnect.channelFactoryAndLoops(io.netty.bootstrap.Bootstrap) - took 6.44 ms
       >reactor.netty.http.client.HttpClientConfiguration.getAndClean(io.netty.bootstrap.Bootstrap)
       <reactor.netty.http.client.HttpClientConfiguration.getAndClean(io.netty.bootstrap.Bootstrap) - took 0.06 ms
      <reactor.netty.http.client.HttpClientConnect$HttpTcpClient.connect(io.netty.bootstrap.Bootstrap) - took 13.46 ms
     <reactor.netty.http.client.HttpClientFinalizer.connect() - took 22.89 ms
    <reactor.netty.http.client.HttpClientFinalizer.responseConnection(java.util.function.BiFunction) - took 97.45 ms
   <org.springframework.http.client.reactive.ReactorClientHttpConnector.connect(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function) - took 108.62 ms
  <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.exchange(org.springframework.web.reactive.function.client.ClientRequest) - took 111.08 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient.access$200()
  <org.springframework.web.reactive.function.client.DefaultWebClient.access$200() - took 0.04 ms
  >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(java.lang.Class)
  <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToMono(java.lang.Class) - took 0.35 ms
  >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(reactor.core.CoreSubscriber)
   >reactor.netty.http.client.UriEndpointFactory.createUriEndpoint(java.lang.String,boolean)
    >reactor.netty.http.client.UriEndpointFactory.createUriEndpoint(java.lang.String,boolean,java.util.function.Supplier)
     >reactor.netty.http.client.UriEndpointFactory.cleanHostString(java.lang.String)
     <reactor.netty.http.client.UriEndpointFactory.cleanHostString(java.lang.String) - took 0.07 ms
     >reactor.netty.http.client.UriEndpointFactory.cleanPathAndQuery(java.lang.String)
     <reactor.netty.http.client.UriEndpointFactory.cleanPathAndQuery(java.lang.String) - took 0.07 ms
    <reactor.netty.http.client.UriEndpointFactory.createUriEndpoint(java.lang.String,boolean,java.util.function.Supplier) - took 4.72 ms
   <reactor.netty.http.client.UriEndpointFactory.createUriEndpoint(java.lang.String,boolean) - took 4.90 ms
   >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$2(org.springframework.web.reactive.function.client.ClientRequest,long)
    >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.logRequest(org.springframework.web.reactive.function.client.ClientRequest)
    <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.logRequest(org.springframework.web.reactive.function.client.ClientRequest) - took 0.09 ms
   <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$2(org.springframework.web.reactive.function.client.ClientRequest,long) - took 0.21 ms
   >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$1(reactor.netty.http.client.HttpClientConnect$HttpClientHandler,reactor.netty.tcp.SslProvider,io.netty.bootstrap.Bootstrap,reactor.core.publisher.MonoSink)
    >reactor.netty.http.client.UriEndpoint.isSecure()
     >reactor.netty.http.client.UriEndpoint.isSecureScheme(java.lang.String)
     <reactor.netty.http.client.UriEndpoint.isSecureScheme(java.lang.String) - took 0.05 ms
    <reactor.netty.http.client.UriEndpoint.isSecure() - took 0.15 ms
    >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.currentContext()
    <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.currentContext() - took 0.12 ms
    >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onSubscribe(org.reactivestreams.Subscription)
    <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onSubscribe(org.reactivestreams.Subscription) - took 0.05 ms
    >reactor.netty.http.client.HttpClientConnect$HttpClientHandler.get()
     >reactor.netty.http.client.HttpClientConnect$HttpClientHandler.get()
      >reactor.netty.http.client.UriEndpoint.getRemoteAddress()
       >reactor.netty.http.client.UriEndpointFactory.lambda$createUriEndpoint$0(java.lang.String,int)
       <reactor.netty.http.client.UriEndpointFactory.lambda$createUriEndpoint$0(java.lang.String,int) - took 0.06 ms
      <reactor.netty.http.client.UriEndpoint.getRemoteAddress() - took 0.13 ms
     <reactor.netty.http.client.HttpClientConnect$HttpClientHandler.get() - took 0.19 ms
    <reactor.netty.http.client.HttpClientConnect$HttpClientHandler.get() - took 0.26 ms
   <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$1(reactor.netty.http.client.HttpClientConnect$HttpClientHandler,reactor.netty.tcp.SslProvider,io.netty.bootstrap.Bootstrap,reactor.core.publisher.MonoSink) - took 21.63 ms
  <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.subscribe(reactor.core.CoreSubscriber) - took 146.11 ms
  >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(reactor.netty.http.client.HttpClientConnect$HttpClientHandler,reactor.netty.ConnectionObserver,io.netty.channel.Channel)
  <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect.lambda$subscribe$0(reactor.netty.http.client.HttpClientConnect$HttpClientHandler,reactor.netty.ConnectionObserver,io.netty.channel.Channel) - took 22.81 ms
  >reactor.netty.http.client.HttpClientConnect.lambda$static$0(reactor.netty.Connection,reactor.netty.ConnectionObserver,java.lang.Object)
  <reactor.netty.http.client.HttpClientConnect.lambda$static$0(reactor.netty.Connection,reactor.netty.ConnectionObserver,java.lang.Object) - took 20.20 ms
  >reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State)
  <reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State) - took 0.14 ms
  >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onNext(java.lang.Object)
   >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onNext(reactor.netty.Connection)
   <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onNext(reactor.netty.Connection) - took 0.06 ms
  <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onNext(java.lang.Object) - took 0.15 ms
  >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onComplete()
  <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.onComplete() - took 0.06 ms
  >reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State)
   >reactor.netty.http.client.HttpClientConnect$HttpClientHandler.channel(io.netty.channel.Channel)
   <reactor.netty.http.client.HttpClientConnect$HttpClientHandler.channel(io.netty.channel.Channel) - took 0.08 ms
   >reactor.netty.http.client.HttpClientConnect$HttpObserver.lambda$onStateChange$0(reactor.netty.Connection)
    >reactor.netty.http.client.HttpClientConnect$HttpClientHandler.requestWithBody(reactor.netty.http.client.HttpClientOperations)
     >reactor.netty.http.client.HttpClientOperations.getNettyRequest()
     <reactor.netty.http.client.HttpClientOperations.getNettyRequest() - took 0.06 ms
     >reactor.netty.http.client.UriEndpoint.getPathAndQuery()
     <reactor.netty.http.client.UriEndpoint.getPathAndQuery() - took 0.04 ms
     >reactor.netty.http.client.HttpClientOperations.address()
     <reactor.netty.http.client.HttpClientOperations.address() - took 0.07 ms
     >reactor.netty.http.client.HttpClientConnect$HttpClientHandler.resolveHostHeaderValue(java.net.InetSocketAddress)
     <reactor.netty.http.client.HttpClientConnect$HttpClientHandler.resolveHostHeaderValue(java.net.InetSocketAddress) - took 0.10 ms
     >reactor.netty.http.client.HttpClientOperations.followRedirect(boolean)
     <reactor.netty.http.client.HttpClientOperations.followRedirect(boolean) - took 0.05 ms
     >reactor.netty.http.client.HttpClientOperations.chunkedTransfer(boolean)
      >reactor.netty.http.HttpOperations.hasSentHeaders()
      <reactor.netty.http.HttpOperations.hasSentHeaders() - took 0.05 ms
     <reactor.netty.http.client.HttpClientOperations.chunkedTransfer(boolean) - took 1.05 ms
     >org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$1(java.util.function.Function,org.springframework.http.HttpMethod,java.net.URI,reactor.netty.http.client.HttpClientRequest,reactor.netty.NettyOutbound)
      >org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptRequest(org.springframework.http.HttpMethod,java.net.URI,reactor.netty.http.client.HttpClientRequest,reactor.netty.NettyOutbound)
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.09 ms
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.10 ms
      <org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptRequest(org.springframework.http.HttpMethod,java.net.URI,reactor.netty.http.client.HttpClientRequest,reactor.netty.NettyOutbound) - took 21.09 ms
      >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$1(org.springframework.web.reactive.function.client.ClientRequest,org.springframework.http.client.reactive.ClientHttpRequest)
       >org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(org.springframework.http.client.reactive.ClientHttpRequest,org.springframework.web.reactive.function.client.ExchangeStrategies)
        >org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders()
        <org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders() - took 0.10 ms
        >org.springframework.http.HttpHeaders.isEmpty()
         >org.springframework.util.LinkedCaseInsensitiveMap.isEmpty()
         <org.springframework.util.LinkedCaseInsensitiveMap.isEmpty() - took 0.04 ms
        <org.springframework.http.HttpHeaders.isEmpty() - took 0.11 ms
        >org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies()
        <org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies() - took 0.05 ms
        >org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty()
        <org.springframework.util.CollectionUtils$MultiValueMapAdapter.isEmpty() - took 0.04 ms
        >org.springframework.web.reactive.function.BodyInserters.lambda$static$0(org.springframework.http.ReactiveHttpOutputMessage,org.springframework.web.reactive.function.BodyInserter$Context)
         >org.springframework.http.client.reactive.ReactorClientHttpRequest.setComplete()
          >org.springframework.http.client.reactive.AbstractClientHttpRequest.doCommit(java.util.function.Supplier)
           >org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$doCommit$1()
           <org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$doCommit$1() - took 0.33 ms
           >reactor.netty.http.HttpOperations.then()
            >reactor.netty.http.HttpOperations.hasSentHeaders()
            <reactor.netty.http.HttpOperations.hasSentHeaders() - took 0.04 ms
           <reactor.netty.http.HttpOperations.then() - took 1.47 ms
          <org.springframework.http.client.reactive.AbstractClientHttpRequest.doCommit(java.util.function.Supplier) - took 2.54 ms
         <org.springframework.http.client.reactive.ReactorClientHttpRequest.setComplete() - took 3.07 ms
        <org.springframework.web.reactive.function.BodyInserters.lambda$static$0(org.springframework.http.ReactiveHttpOutputMessage,org.springframework.web.reactive.function.BodyInserter$Context) - took 3.17 ms
       <org.springframework.web.reactive.function.client.DefaultClientRequestBuilder$BodyInserterRequest.writeTo(org.springframework.http.client.reactive.ClientHttpRequest,org.springframework.web.reactive.function.client.ExchangeStrategies) - took 5.42 ms
      <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$1(org.springframework.web.reactive.function.client.ClientRequest,org.springframework.http.client.reactive.ClientHttpRequest) - took 5.49 ms
     <org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$1(java.util.function.Function,org.springframework.http.HttpMethod,java.net.URI,reactor.netty.http.client.HttpClientRequest,reactor.netty.NettyOutbound) - took 26.70 ms
    <reactor.netty.http.client.HttpClientConnect$HttpClientHandler.requestWithBody(reactor.netty.http.client.HttpClientOperations) - took 28.42 ms
   <reactor.netty.http.client.HttpClientConnect$HttpObserver.lambda$onStateChange$0(reactor.netty.Connection) - took 28.50 ms
   >org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$null$0()
    >org.springframework.http.client.reactive.ReactorClientHttpRequest.applyHeaders()
     >org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders()
     <org.springframework.http.client.reactive.AbstractClientHttpRequest.getHeaders() - took 0.04 ms
     >org.springframework.http.HttpHeaders.entrySet()
      >org.springframework.util.LinkedCaseInsensitiveMap.entrySet()
      <org.springframework.util.LinkedCaseInsensitiveMap.entrySet() - took 0.03 ms
     <org.springframework.http.HttpHeaders.entrySet() - took 0.10 ms
    <org.springframework.http.client.reactive.ReactorClientHttpRequest.applyHeaders() - took 0.55 ms
    >org.springframework.http.client.reactive.ReactorClientHttpRequest.applyCookies()
     >org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies()
     <org.springframework.http.client.reactive.AbstractClientHttpRequest.getCookies() - took 0.05 ms
     >org.springframework.util.LinkedMultiValueMap.values()
     <org.springframework.util.LinkedMultiValueMap.values() - took 0.04 ms
    <org.springframework.http.client.reactive.ReactorClientHttpRequest.applyCookies() - took 4.34 ms
   <org.springframework.http.client.reactive.AbstractClientHttpRequest.lambda$null$0() - took 5.02 ms
   >reactor.netty.http.HttpOperations.lambda$then$0()
    >reactor.netty.http.HttpOperations.markSentHeaders()
    <reactor.netty.http.HttpOperations.markSentHeaders() - took 0.04 ms
    >reactor.netty.http.client.HttpClientOperations.outboundHttpMessage()
    <reactor.netty.http.client.HttpClientOperations.outboundHttpMessage() - took 0.04 ms
    >reactor.netty.http.client.HttpClientOperations.outboundHttpMessage()
    <reactor.netty.http.client.HttpClientOperations.outboundHttpMessage() - took 0.04 ms
    >reactor.netty.http.client.HttpClientOperations.preSendHeadersAndStatus()
    <reactor.netty.http.client.HttpClientOperations.preSendHeadersAndStatus() - took 0.03 ms
   <reactor.netty.http.HttpOperations.lambda$then$0() - took 26.30 ms
   >reactor.netty.http.client.HttpClientOperations.onOutboundComplete()
    >reactor.netty.http.client.HttpClientOperations.isWebsocket()
    <reactor.netty.http.client.HttpClientOperations.isWebsocket() - took 27.04 ms
    >reactor.netty.http.HttpOperations.markSentHeaderAndBody()
    <reactor.netty.http.HttpOperations.markSentHeaderAndBody() - took 0.07 ms
    >reactor.netty.http.HttpOperations.markSentBody()
    <reactor.netty.http.HttpOperations.markSentBody() - took 0.05 ms
    >reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State)
    <reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State) - took 0.15 ms
   <reactor.netty.http.client.HttpClientOperations.onOutboundComplete() - took 28.75 ms
  <reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State) - took 90.83 ms
  >reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.currentContext()
  <reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$TcpClientSubscriber.currentContext() - took 0.08 ms
  >reactor.netty.http.client.HttpClientOperations.onInboundNext(io.netty.channel.ChannelHandlerContext,java.lang.Object)
   >reactor.netty.http.client.HttpClientOperations.setNettyResponse(io.netty.handler.codec.http.HttpResponse)
    >reactor.netty.http.Cookies.newClientResponseHolder(io.netty.handler.codec.http.HttpHeaders)
    <reactor.netty.http.Cookies.newClientResponseHolder(io.netty.handler.codec.http.HttpHeaders) - took 0.17 ms
   <reactor.netty.http.client.HttpClientOperations.setNettyResponse(io.netty.handler.codec.http.HttpResponse) - took 5.40 ms
   >reactor.netty.http.client.HttpClientOperations.isKeepAlive()
   <reactor.netty.http.client.HttpClientOperations.isKeepAlive() - took 0.18 ms
   >reactor.netty.http.client.HttpClientOperations.notRedirected(io.netty.handler.codec.http.HttpResponse)
   <reactor.netty.http.client.HttpClientOperations.notRedirected(io.netty.handler.codec.http.HttpResponse) - took 0.08 ms
   >reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State)
    >reactor.netty.http.client.HttpClientFinalizer.lambda$responseConnection$4(java.util.function.BiFunction,reactor.netty.http.client.HttpClientOperations)
     >org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$2(reactor.netty.http.client.HttpClientResponse,reactor.netty.Connection)
      >org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptResponse(reactor.netty.http.client.HttpClientResponse,reactor.netty.NettyInbound,io.netty.buffer.ByteBufAllocator)
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.15 ms
      <org.springframework.http.client.reactive.ReactorClientHttpConnector.adaptResponse(reactor.netty.http.client.HttpClientResponse,reactor.netty.NettyInbound,io.netty.buffer.ByteBufAllocator) - took 6.28 ms
     <org.springframework.http.client.reactive.ReactorClientHttpConnector.lambda$connect$2(reactor.netty.http.client.HttpClientResponse,reactor.netty.Connection) - took 6.57 ms
    <reactor.netty.http.client.HttpClientFinalizer.lambda$responseConnection$4(java.util.function.BiFunction,reactor.netty.http.client.HttpClientOperations) - took 6.78 ms
    >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$4(java.lang.String,org.springframework.http.client.reactive.ClientHttpResponse)
     >org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.logResponse(org.springframework.http.client.reactive.ClientHttpResponse,java.lang.String)
     <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.logResponse(org.springframework.http.client.reactive.ClientHttpResponse,java.lang.String) - took 0.08 ms
    <org.springframework.web.reactive.function.client.ExchangeFunctions$DefaultExchangeFunction.lambda$exchange$4(java.lang.String,org.springframework.http.client.reactive.ClientHttpResponse) - took 17.25 ms
    >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToMono$0(java.lang.Class,org.springframework.web.reactive.function.client.ClientResponse)
     >org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(java.lang.Class)
      >org.springframework.web.reactive.function.BodyExtractors.toMono(java.lang.Class)
       >org.springframework.core.ResolvableType.forClass(java.lang.Class)
       <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.04 ms
       >org.springframework.web.reactive.function.BodyExtractors.toMono(org.springframework.core.ResolvableType)
       <org.springframework.web.reactive.function.BodyExtractors.toMono(org.springframework.core.ResolvableType) - took 0.75 ms
      <org.springframework.web.reactive.function.BodyExtractors.toMono(java.lang.Class) - took 0.87 ms
      >org.springframework.web.reactive.function.client.DefaultClientResponse.body(org.springframework.web.reactive.function.BodyExtractor)
       >org.springframework.web.reactive.function.BodyExtractors.lambda$toMono$2(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context)
        >org.springframework.web.reactive.function.BodyExtractors.skipBodyAsMono(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context)
         >org.springframework.web.reactive.function.BodyExtractors.isExtractingForClient(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context)
          >org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse()
          <org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse() - took 0.08 ms
         <org.springframework.web.reactive.function.BodyExtractors.isExtractingForClient(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context) - took 0.16 ms
        <org.springframework.web.reactive.function.BodyExtractors.skipBodyAsMono(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context) - took 0.64 ms
        >org.springframework.web.reactive.function.BodyExtractors.readWithMessageReaders(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,java.util.function.Function,java.util.function.Function,java.util.function.Supplier)
         >org.springframework.core.ResolvableType.equals(java.lang.Object)
          >org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object)
          <org.springframework.util.ObjectUtils.nullSafeEquals(java.lang.Object,java.lang.Object) - took 0.03 ms
         <org.springframework.core.ResolvableType.equals(java.lang.Object) - took 0.10 ms
         >org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders()
          >reactor.netty.http.client.HttpClientOperations.responseHeaders()
          <reactor.netty.http.client.HttpClientOperations.responseHeaders() - took 0.04 ms
          >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
           >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
            >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function)
             >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function)
              >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
               >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
               <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.09 ms
              >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
              <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.05 ms
              >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
               >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
               <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.08 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function) - took 0.34 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function) - took 0.42 ms
           <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.88 ms
          <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.99 ms
          >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
           >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
            >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function)
             >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function)
              >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
               >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
               <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.08 ms
              >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
              <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
              >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
               >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
               <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.09 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function) - took 0.29 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function) - took 0.34 ms
           <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.38 ms
          <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.44 ms
          >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
           >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
            >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function)
             >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function)
              >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
               >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
               <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
              >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
              <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
              >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
               >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
               <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
              <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.07 ms
             <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function) - took 0.26 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function) - took 0.30 ms
           <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.35 ms
          <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.40 ms
         <org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders() - took 2.99 ms
         >org.springframework.http.HttpHeaders.getContentType()
          >org.springframework.http.HttpHeaders.getFirst(java.lang.String)
           >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
            >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
             >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
             <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
            <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
           <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.14 ms
          <org.springframework.http.HttpHeaders.getFirst(java.lang.String) - took 0.20 ms
          >org.springframework.util.StringUtils.hasLength(java.lang.String)
          <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.05 ms
          >org.springframework.http.MediaType.parseMediaType(java.lang.String)
           >org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String)
            >org.springframework.util.StringUtils.hasLength(java.lang.String)
            <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
            >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
             >org.springframework.util.StringUtils.hasLength(java.lang.String)
             <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
            <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.09 ms
            >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
             >org.springframework.util.StringUtils.hasLength(java.lang.String)
             <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
            <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
            >org.springframework.util.MimeType.checkToken(java.lang.String)
            <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
            >org.springframework.util.MimeType.checkToken(java.lang.String)
            <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
            >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
            <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
           <org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String) - took 0.41 ms
           >org.springframework.util.MimeType.getType()
           <org.springframework.util.MimeType.getType() - took 0.03 ms
           >org.springframework.util.MimeType.getSubtype()
           <org.springframework.util.MimeType.getSubtype() - took 0.03 ms
           >org.springframework.util.MimeType.getParameters()
           <org.springframework.util.MimeType.getParameters() - took 0.03 ms
           >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
            >org.springframework.util.StringUtils.hasLength(java.lang.String)
            <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
           <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
           >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
            >org.springframework.util.StringUtils.hasLength(java.lang.String)
            <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.04 ms
           <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.08 ms
           >org.springframework.util.MimeType.checkToken(java.lang.String)
           <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
           >org.springframework.util.MimeType.checkToken(java.lang.String)
           <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
           >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
           <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
          <org.springframework.http.MediaType.parseMediaType(java.lang.String) - took 0.91 ms
         <org.springframework.http.HttpHeaders.getContentType() - took 1.26 ms
         >org.springframework.web.reactive.function.client.DefaultClientResponse$1.messageReaders()
          >org.springframework.web.reactive.function.client.DefaultClientResponse.access$100(org.springframework.web.reactive.function.client.DefaultClientResponse)
          <org.springframework.web.reactive.function.client.DefaultClientResponse.access$100(org.springframework.web.reactive.function.client.DefaultClientResponse) - took 0.04 ms
          >org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.messageReaders()
          <org.springframework.web.reactive.function.client.DefaultExchangeStrategiesBuilder$DefaultExchangeStrategies.messageReaders() - took 0.03 ms
         <org.springframework.web.reactive.function.client.DefaultClientResponse$1.messageReaders() - took 0.15 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.codec.ByteArrayDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.core.ResolvableType.getRawClass()
            <org.springframework.core.ResolvableType.getRawClass() - took 0.04 ms
            >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
             >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
              >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.03 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.08 ms
              <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.13 ms
             <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.20 ms
            <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.59 ms
           <org.springframework.core.codec.ByteArrayDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.72 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.78 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.86 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.codec.ByteBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.core.ResolvableType.getRawClass()
            <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
            >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
             >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
              >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.03 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
              <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.11 ms
             <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.16 ms
            <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.22 ms
           <org.springframework.core.codec.ByteBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.35 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.41 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.45 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.codec.DataBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.core.ResolvableType.getRawClass()
            <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
            >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
             >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
              >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.03 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
              <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.12 ms
             <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.16 ms
            <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.22 ms
           <org.springframework.core.codec.DataBufferDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.33 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.38 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.42 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.codec.ResourceDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.core.ResolvableType.getRawClass()
            <org.springframework.core.ResolvableType.getRawClass() - took 0.03 ms
           <org.springframework.core.codec.ResourceDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.10 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.15 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.19 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
             >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
              >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.03 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.03 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
               >org.springframework.util.MimeType.getType()
               <org.springframework.util.MimeType.getType() - took 0.03 ms
               >org.springframework.util.MimeType.getType()
               <org.springframework.util.MimeType.getType() - took 0.03 ms
              <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.29 ms
             <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.34 ms
            <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.39 ms
           <org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.44 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.49 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.54 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.FormHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType)
            >org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType,java.util.Map)
             >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
             <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
             >org.springframework.core.ResolvableType.isArray()
              >org.springframework.core.ResolvableType.resolveType()
               >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
               <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
               >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
                >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
                 >org.springframework.core.ResolvableType.resolveClass()
                 <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
                <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.08 ms
               <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.13 ms
              <org.springframework.core.ResolvableType.resolveType() - took 0.22 ms
              >org.springframework.core.ResolvableType.isArray()
               >org.springframework.core.ResolvableType.resolveType()
               <org.springframework.core.ResolvableType.resolveType() - took 0.03 ms
               >org.springframework.core.ResolvableType.isArray()
               <org.springframework.core.ResolvableType.isArray() - took 0.03 ms
              <org.springframework.core.ResolvableType.isArray() - took 0.11 ms
             <org.springframework.core.ResolvableType.isArray() - took 0.40 ms
             >org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType)
              >org.springframework.core.ResolvableType.getType()
               >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
               <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
              <org.springframework.core.ResolvableType.getType() - took 0.09 ms
              >org.springframework.core.ResolvableType.resolveType()
               >org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType()
               <org.springframework.core.ResolvableType$SyntheticParameterizedType.getRawType() - took 0.03 ms
               >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
                >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
                 >org.springframework.core.ResolvableType.resolveClass()
                 <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
                <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.07 ms
               <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.12 ms
              <org.springframework.core.ResolvableType.resolveType() - took 0.21 ms
              >org.springframework.core.ResolvableType.getType()
               >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
               <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
              <org.springframework.core.ResolvableType.getType() - took 0.07 ms
              >org.springframework.core.ResolvableType.resolveType()
              <org.springframework.core.ResolvableType.resolveType() - took 0.03 ms
              >org.springframework.core.ResolvableType.getType()
               >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
               <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
              <org.springframework.core.ResolvableType.getType() - took 0.08 ms
             <org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType) - took 0.71 ms
             >org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType)
              >org.springframework.core.ResolvableType.getType()
               >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
               <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.05 ms
              <org.springframework.core.ResolvableType.getType() - took 0.14 ms
              >org.springframework.core.ResolvableType.resolveType()
              <org.springframework.core.ResolvableType.resolveType() - took 0.06 ms
              >org.springframework.core.ResolvableType.getType()
               >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
               <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
              <org.springframework.core.ResolvableType.getType() - took 0.07 ms
             <org.springframework.core.ResolvableType$WildcardBounds.get(org.springframework.core.ResolvableType) - took 0.37 ms
             >org.springframework.core.ResolvableType.resolve(java.lang.Class)
             <org.springframework.core.ResolvableType.resolve(java.lang.Class) - took 0.03 ms
             >org.springframework.core.ResolvableType.toClass()
              >org.springframework.core.ResolvableType.resolve(java.lang.Class)
              <org.springframework.core.ResolvableType.resolve(java.lang.Class) - took 0.03 ms
             <org.springframework.core.ResolvableType.toClass() - took 0.08 ms
             >org.springframework.util.ClassUtils.isAssignable(java.lang.Class,java.lang.Class)
              >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
              <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
              >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
              <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
             <org.springframework.util.ClassUtils.isAssignable(java.lang.Class,java.lang.Class) - took 0.14 ms
            <org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType,java.util.Map) - took 5.60 ms
           <org.springframework.core.ResolvableType.isAssignableFrom(org.springframework.core.ResolvableType) - took 5.66 ms
           >org.springframework.core.ResolvableType.hasUnresolvableGenerics()
            >org.springframework.core.ResolvableType.getGenerics()
            <org.springframework.core.ResolvableType.getGenerics() - took 0.04 ms
            >org.springframework.core.ResolvableType.resolve()
            <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
            >org.springframework.core.ResolvableType.forClass(java.lang.Class)
            <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.04 ms
            >org.springframework.core.ResolvableType.hasGenerics()
             >org.springframework.core.ResolvableType.getGenerics()
             <org.springframework.core.ResolvableType.getGenerics() - took 0.03 ms
            <org.springframework.core.ResolvableType.hasGenerics() - took 0.07 ms
            >org.springframework.core.ResolvableType.forClass(java.lang.Class)
            <org.springframework.core.ResolvableType.forClass(java.lang.Class) - took 0.03 ms
            >org.springframework.core.ResolvableType.hasGenerics()
             >org.springframework.core.ResolvableType.getGenerics()
             <org.springframework.core.ResolvableType.getGenerics() - took 0.03 ms
            <org.springframework.core.ResolvableType.hasGenerics() - took 0.07 ms
            >org.springframework.core.ResolvableType.getSuperType()
             >org.springframework.core.ResolvableType.resolve()
             <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
             >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType)
              >org.springframework.core.ResolvableType.asVariableResolver()
              <org.springframework.core.ResolvableType.asVariableResolver() - took 1.44 ms
              >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver)
               >org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver)
                >org.springframework.core.ResolvableType.resolveClass()
                <org.springframework.core.ResolvableType.resolveClass() - took 0.03 ms
               <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.SerializableTypeWrapper$TypeProvider,org.springframework.core.ResolvableType$VariableResolver) - took 0.08 ms
              <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType$VariableResolver) - took 0.12 ms
             <org.springframework.core.ResolvableType.forType(java.lang.reflect.Type,org.springframework.core.ResolvableType) - took 1.65 ms
            <org.springframework.core.ResolvableType.getSuperType() - took 1.76 ms
            >org.springframework.core.ResolvableType.hasUnresolvableGenerics()
             >org.springframework.core.ResolvableType.getGenerics()
             <org.springframework.core.ResolvableType.getGenerics() - took 0.04 ms
             >org.springframework.core.ResolvableType.resolve()
             <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
             >org.springframework.core.ResolvableType.getSuperType()
              >org.springframework.core.ResolvableType.resolve()
              <org.springframework.core.ResolvableType.resolve() - took 0.03 ms
             <org.springframework.core.ResolvableType.getSuperType() - took 0.09 ms
             >org.springframework.core.ResolvableType.hasUnresolvableGenerics()
             <org.springframework.core.ResolvableType.hasUnresolvableGenerics() - took 0.03 ms
            <org.springframework.core.ResolvableType.hasUnresolvableGenerics() - took 0.28 ms
           <org.springframework.core.ResolvableType.hasUnresolvableGenerics() - took 2.51 ms
          <org.springframework.http.codec.FormHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 8.25 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 8.30 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.http.codec.json.AbstractJackson2Decoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.http.codec.json.Jackson2CodecSupport.getObjectMapper()
            <org.springframework.http.codec.json.Jackson2CodecSupport.getObjectMapper() - took 0.03 ms
            >org.springframework.core.ResolvableType.getType()
             >org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type)
             <org.springframework.core.SerializableTypeWrapper.unwrap(java.lang.reflect.Type) - took 0.03 ms
            <org.springframework.core.ResolvableType.getType() - took 0.07 ms
            >org.springframework.core.ResolvableType.toClass()
             >org.springframework.core.ResolvableType.resolve(java.lang.Class)
             <org.springframework.core.ResolvableType.resolve(java.lang.Class) - took 0.03 ms
            <org.springframework.core.ResolvableType.toClass() - took 0.09 ms
           <org.springframework.http.codec.json.AbstractJackson2Decoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.85 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.90 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.94 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.ServerSentEventHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.http.MediaType.includes(org.springframework.http.MediaType)
            >org.springframework.util.MimeType.includes(org.springframework.util.MimeType)
             >org.springframework.util.MimeType.isWildcardType()
              >org.springframework.util.MimeType.getType()
              <org.springframework.util.MimeType.getType() - took 0.03 ms
             <org.springframework.util.MimeType.isWildcardType() - took 0.07 ms
             >org.springframework.util.MimeType.getType()
             <org.springframework.util.MimeType.getType() - took 0.03 ms
             >org.springframework.util.MimeType.getType()
             <org.springframework.util.MimeType.getType() - took 0.03 ms
            <org.springframework.util.MimeType.includes(org.springframework.util.MimeType) - took 0.20 ms
           <org.springframework.http.MediaType.includes(org.springframework.http.MediaType) - took 0.25 ms
           >org.springframework.http.codec.ServerSentEventHttpMessageReader.isServerSentEvent(org.springframework.core.ResolvableType)
            >org.springframework.core.ResolvableType.getRawClass()
            <org.springframework.core.ResolvableType.getRawClass() - took 0.05 ms
           <org.springframework.http.codec.ServerSentEventHttpMessageReader.isServerSentEvent(org.springframework.core.ResolvableType) - took 0.13 ms
          <org.springframework.http.codec.ServerSentEventHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 0.50 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 0.57 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType)
           >org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
            >org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType)
             >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
              >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.04 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.11 ms
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.04 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.10 ms
               >org.springframework.util.MimeType.getType()
               <org.springframework.util.MimeType.getType() - took 0.05 ms
               >org.springframework.util.MimeType.getType()
               <org.springframework.util.MimeType.getType() - took 0.04 ms
              <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.47 ms
             <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.53 ms
             >org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType)
              >org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType)
               >org.springframework.util.MimeType.isWildcardType()
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.04 ms
               <org.springframework.util.MimeType.isWildcardType() - took 0.09 ms
              <org.springframework.util.MimeType.isCompatibleWith(org.springframework.util.MimeType) - took 0.15 ms
             <org.springframework.core.codec.AbstractDecoder.lambda$canDecode$0(org.springframework.util.MimeType,org.springframework.util.MimeType) - took 0.21 ms
            <org.springframework.core.codec.AbstractDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 0.85 ms
            >org.springframework.core.ResolvableType.getRawClass()
            <org.springframework.core.ResolvableType.getRawClass() - took 0.04 ms
           <org.springframework.core.codec.StringDecoder.canDecode(org.springframework.core.ResolvableType,org.springframework.util.MimeType) - took 1.02 ms
          <org.springframework.http.codec.DecoderHttpMessageReader.canRead(org.springframework.core.ResolvableType,org.springframework.http.MediaType) - took 1.07 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$readWithMessageReaders$10(org.springframework.core.ResolvableType,org.springframework.http.MediaType,org.springframework.http.codec.HttpMessageReader) - took 1.13 ms
         >org.springframework.web.reactive.function.BodyExtractors.cast(org.springframework.http.codec.HttpMessageReader)
         <org.springframework.web.reactive.function.BodyExtractors.cast(org.springframework.http.codec.HttpMessageReader) - took 0.05 ms
         >org.springframework.web.reactive.function.BodyExtractors.lambda$null$0(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,org.springframework.http.codec.HttpMessageReader)
          >org.springframework.web.reactive.function.BodyExtractors.readToMono(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,org.springframework.http.codec.HttpMessageReader)
           >org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse()
           <org.springframework.web.reactive.function.client.DefaultClientResponse$1.serverResponse() - took 0.03 ms
           >org.springframework.web.reactive.function.BodyExtractors.lambda$readToMono$16(org.springframework.http.codec.HttpMessageReader,org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context)
            >org.springframework.web.reactive.function.client.DefaultClientResponse$1.hints()
             >org.springframework.web.reactive.function.client.DefaultClientResponse.access$200(org.springframework.web.reactive.function.client.DefaultClientResponse)
             <org.springframework.web.reactive.function.client.DefaultClientResponse.access$200(org.springframework.web.reactive.function.client.DefaultClientResponse) - took 0.03 ms
             >org.springframework.core.codec.Hints.from(java.lang.String,java.lang.Object)
             <org.springframework.core.codec.Hints.from(java.lang.String,java.lang.Object) - took 0.06 ms
            <org.springframework.web.reactive.function.client.DefaultClientResponse$1.hints() - took 0.18 ms
            >org.springframework.http.codec.DecoderHttpMessageReader.readMono(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,java.util.Map)
             >org.springframework.http.codec.DecoderHttpMessageReader.getContentType(org.springframework.http.HttpMessage)
              >org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders()
               >reactor.netty.http.client.HttpClientOperations.responseHeaders()
               <reactor.netty.http.client.HttpClientOperations.responseHeaders() - took 0.03 ms
               >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
                >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
                 >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function)
                  >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function)
                   >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                    >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                    <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.04 ms
                   <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.10 ms
                   >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
                   <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.04 ms
                   >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
                    >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
                    <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.04 ms
                   <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.09 ms
                  <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function) - took 0.34 ms
                 <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function) - took 0.40 ms
                <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.46 ms
               <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.53 ms
               >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
                >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
                 >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function)
                  >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function)
                   >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                    >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                    <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
                   <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.08 ms
                   >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
                   <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
                   >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
                    >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
                    <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
                   <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.09 ms
                  <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function) - took 0.27 ms
                 <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function) - took 0.32 ms
                <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.38 ms
               <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.43 ms
               >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry)
                >org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String)
                 >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function)
                  >org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function)
                   >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                    >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                    <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
                   <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
                   >org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String)
                   <org.springframework.http.HttpHeaders.lambda$add$5(java.lang.String) - took 0.03 ms
                   >org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry)
                    >org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry)
                    <org.springframework.util.LinkedCaseInsensitiveMap.removeEldestEntry(java.util.Map$Entry) - took 0.03 ms
                   <org.springframework.util.LinkedCaseInsensitiveMap$1.removeEldestEntry(java.util.Map$Entry) - took 0.07 ms
                  <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.String,java.util.function.Function) - took 0.25 ms
                 <org.springframework.util.LinkedCaseInsensitiveMap.computeIfAbsent(java.lang.Object,java.util.function.Function) - took 0.29 ms
                <org.springframework.http.HttpHeaders.add(java.lang.String,java.lang.String) - took 0.34 ms
               <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getHeaders$1(org.springframework.http.HttpHeaders,java.util.Map$Entry) - took 0.39 ms
              <org.springframework.http.client.reactive.ReactorClientHttpResponse.getHeaders() - took 1.49 ms
              >org.springframework.http.HttpHeaders.getContentType()
               >org.springframework.http.HttpHeaders.getFirst(java.lang.String)
                >org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object)
                 >org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String)
                  >org.springframework.util.LinkedCaseInsensitiveMap.getLocale()
                  <org.springframework.util.LinkedCaseInsensitiveMap.getLocale() - took 0.03 ms
                 <org.springframework.util.LinkedCaseInsensitiveMap.convertKey(java.lang.String) - took 0.07 ms
                <org.springframework.util.LinkedCaseInsensitiveMap.get(java.lang.Object) - took 0.12 ms
               <org.springframework.http.HttpHeaders.getFirst(java.lang.String) - took 0.17 ms
               >org.springframework.util.StringUtils.hasLength(java.lang.String)
               <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.04 ms
               >org.springframework.http.MediaType.parseMediaType(java.lang.String)
                >org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String)
                 >org.springframework.util.StringUtils.hasLength(java.lang.String)
                 <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.04 ms
                 >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
                  >org.springframework.util.StringUtils.hasLength(java.lang.String)
                  <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
                 <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.08 ms
                 >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
                  >org.springframework.util.StringUtils.hasLength(java.lang.String)
                  <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
                 <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
                 >org.springframework.util.MimeType.checkToken(java.lang.String)
                 <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
                 >org.springframework.util.MimeType.checkToken(java.lang.String)
                 <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
                 >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
                 <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
                <org.springframework.util.MimeTypeUtils.parseMimeType(java.lang.String) - took 0.40 ms
                >org.springframework.util.MimeType.getType()
                <org.springframework.util.MimeType.getType() - took 0.03 ms
                >org.springframework.util.MimeType.getSubtype()
                <org.springframework.util.MimeType.getSubtype() - took 0.03 ms
                >org.springframework.util.MimeType.getParameters()
                <org.springframework.util.MimeType.getParameters() - took 0.03 ms
                >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
                 >org.springframework.util.StringUtils.hasLength(java.lang.String)
                 <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
                <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
                >org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String)
                 >org.springframework.util.StringUtils.hasLength(java.lang.String)
                 <org.springframework.util.StringUtils.hasLength(java.lang.String) - took 0.03 ms
                <org.springframework.util.Assert.hasLength(java.lang.String,java.lang.String) - took 0.07 ms
                >org.springframework.util.MimeType.checkToken(java.lang.String)
                <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
                >org.springframework.util.MimeType.checkToken(java.lang.String)
                <org.springframework.util.MimeType.checkToken(java.lang.String) - took 0.03 ms
                >org.springframework.util.CollectionUtils.isEmpty(java.util.Map)
                <org.springframework.util.CollectionUtils.isEmpty(java.util.Map) - took 0.03 ms
               <org.springframework.http.MediaType.parseMediaType(java.lang.String) - took 0.87 ms
              <org.springframework.http.HttpHeaders.getContentType() - took 1.15 ms
             <org.springframework.http.codec.DecoderHttpMessageReader.getContentType(org.springframework.http.HttpMessage) - took 2.71 ms
             >org.springframework.http.client.reactive.ReactorClientHttpResponse.getBody()
             <org.springframework.http.client.reactive.ReactorClientHttpResponse.getBody() - took 0.98 ms
             >org.springframework.core.codec.AbstractDataBufferDecoder.decodeToMono(org.reactivestreams.Publisher,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)
              >org.springframework.core.io.buffer.DataBufferUtils.join(org.reactivestreams.Publisher)
               >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
               <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
              <org.springframework.core.io.buffer.DataBufferUtils.join(org.reactivestreams.Publisher) - took 1.01 ms
             <org.springframework.core.codec.AbstractDataBufferDecoder.decodeToMono(org.reactivestreams.Publisher,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map) - took 20.57 ms
            <org.springframework.http.codec.DecoderHttpMessageReader.readMono(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,java.util.Map) - took 24.43 ms
           <org.springframework.web.reactive.function.BodyExtractors.lambda$readToMono$16(org.springframework.http.codec.HttpMessageReader,org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context) - took 24.74 ms
          <org.springframework.web.reactive.function.BodyExtractors.readToMono(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,org.springframework.http.codec.HttpMessageReader) - took 25.80 ms
         <org.springframework.web.reactive.function.BodyExtractors.lambda$null$0(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,org.springframework.http.codec.HttpMessageReader) - took 25.86 ms
        <org.springframework.web.reactive.function.BodyExtractors.readWithMessageReaders(org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context,org.springframework.core.ResolvableType,java.util.function.Function,java.util.function.Function,java.util.function.Supplier) - took 45.46 ms
       <org.springframework.web.reactive.function.BodyExtractors.lambda$toMono$2(org.springframework.core.ResolvableType,org.springframework.http.ReactiveHttpInputMessage,org.springframework.web.reactive.function.BodyExtractor$Context) - took 47.02 ms
      <org.springframework.web.reactive.function.client.DefaultClientResponse.body(org.springframework.web.reactive.function.BodyExtractor) - took 49.34 ms
     <org.springframework.web.reactive.function.client.DefaultClientResponse.bodyToMono(java.lang.Class) - took 50.30 ms
     >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToPublisher(org.springframework.web.reactive.function.client.ClientResponse,org.reactivestreams.Publisher,java.util.function.Function)
      >org.springframework.web.reactive.function.client.DefaultClientResponse.rawStatusCode()
       >org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode()
        >reactor.netty.http.client.HttpClientOperations.status()
        <reactor.netty.http.client.HttpClientOperations.status() - took 0.15 ms
       <org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode() - took 0.30 ms
      <org.springframework.web.reactive.function.client.DefaultClientResponse.rawStatusCode() - took 0.38 ms
      >org.springframework.http.HttpStatus.resolve(int)
       >org.springframework.http.HttpStatus.values()
       <org.springframework.http.HttpStatus.values() - took 0.06 ms
      <org.springframework.http.HttpStatus.resolve(int) - took 0.15 ms
      >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToPublisher$4(org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler)
       >org.springframework.web.reactive.function.client.DefaultClientResponse.statusCode()
        >org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode()
         >org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode()
          >reactor.netty.http.client.HttpClientOperations.status()
          <reactor.netty.http.client.HttpClientOperations.status() - took 0.04 ms
         <org.springframework.http.client.reactive.ReactorClientHttpResponse.getRawStatusCode() - took 0.09 ms
         >org.springframework.http.HttpStatus.valueOf(int)
          >org.springframework.http.HttpStatus.resolve(int)
           >org.springframework.http.HttpStatus.values()
           <org.springframework.http.HttpStatus.values() - took 0.04 ms
          <org.springframework.http.HttpStatus.resolve(int) - took 0.08 ms
         <org.springframework.http.HttpStatus.valueOf(int) - took 0.13 ms
        <org.springframework.http.client.reactive.ReactorClientHttpResponse.getStatusCode() - took 0.30 ms
       <org.springframework.web.reactive.function.client.DefaultClientResponse.statusCode() - took 0.42 ms
       >org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler.test(org.springframework.http.HttpStatus)
        >org.springframework.http.HttpStatus.isError()
         >org.springframework.http.HttpStatus.is4xxClientError()
          >org.springframework.http.HttpStatus.series()
           >org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus)
            >org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus)
            <org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus) - took 0.03 ms
            >org.springframework.http.HttpStatus$Series.valueOf(int)
             >org.springframework.http.HttpStatus$Series.values()
             <org.springframework.http.HttpStatus$Series.values() - took 0.05 ms
            <org.springframework.http.HttpStatus$Series.valueOf(int) - took 0.10 ms
           <org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus) - took 0.23 ms
          <org.springframework.http.HttpStatus.series() - took 0.32 ms
         <org.springframework.http.HttpStatus.is4xxClientError() - took 3.54 ms
         >org.springframework.http.HttpStatus.is5xxServerError()
          >org.springframework.http.HttpStatus.series()
           >org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus)
            >org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus)
            <org.springframework.http.HttpStatus.access$000(org.springframework.http.HttpStatus) - took 0.03 ms
            >org.springframework.http.HttpStatus$Series.valueOf(int)
             >org.springframework.http.HttpStatus$Series.values()
             <org.springframework.http.HttpStatus$Series.values() - took 0.03 ms
            <org.springframework.http.HttpStatus$Series.valueOf(int) - took 0.08 ms
           <org.springframework.http.HttpStatus$Series.valueOf(org.springframework.http.HttpStatus) - took 0.17 ms
          <org.springframework.http.HttpStatus.series() - took 0.21 ms
         <org.springframework.http.HttpStatus.is5xxServerError() - took 0.26 ms
        <org.springframework.http.HttpStatus.isError() - took 3.87 ms
       <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler.test(org.springframework.http.HttpStatus) - took 3.95 ms
      <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToPublisher$4(org.springframework.web.reactive.function.client.ClientResponse,org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec$StatusHandler) - took 4.52 ms
     <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.bodyToPublisher(org.springframework.web.reactive.function.client.ClientResponse,org.reactivestreams.Publisher,java.util.function.Function) - took 6.76 ms
    <org.springframework.web.reactive.function.client.DefaultWebClient$DefaultResponseSpec.lambda$bodyToMono$0(java.lang.Class,org.springframework.web.reactive.function.client.ClientResponse) - took 57.58 ms
   <reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State) - took 85.98 ms
  <reactor.netty.http.client.HttpClientOperations.onInboundNext(io.netty.channel.ChannelHandlerContext,java.lang.Object) - took 92.48 ms
  >reactor.netty.http.client.HttpClientOperations.onInboundNext(io.netty.channel.ChannelHandlerContext,java.lang.Object)
   >org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getBody$0(io.netty.buffer.ByteBuf)
    >org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(io.netty.buffer.ByteBuf)
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.07 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
    <org.springframework.core.io.buffer.NettyDataBufferFactory.wrap(io.netty.buffer.ByteBuf) - took 21.31 ms
   <org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getBody$0(io.netty.buffer.ByteBuf) - took 21.39 ms
  <reactor.netty.http.client.HttpClientOperations.onInboundNext(io.netty.channel.ChannelHandlerContext,java.lang.Object) - took 21.67 ms
  >reactor.netty.http.client.HttpClientOperations.onInboundNext(io.netty.channel.ChannelHandlerContext,java.lang.Object)
   >reactor.netty.http.HttpOperations.markSentBody()
   <reactor.netty.http.HttpOperations.markSentBody() - took 0.04 ms
   >reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State)
   <reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(reactor.netty.Connection,reactor.netty.ConnectionObserver$State) - took 0.08 ms
   >org.springframework.core.io.buffer.DataBufferUtils.lambda$join$16(java.util.List)
   <org.springframework.core.io.buffer.DataBufferUtils.lambda$join$16(java.util.List) - took 0.07 ms
   >org.springframework.core.io.buffer.DataBufferUtils.lambda$join$17(java.util.List)
    >org.springframework.core.io.buffer.NettyDataBuffer.factory()
     >org.springframework.core.io.buffer.NettyDataBuffer.factory()
     <org.springframework.core.io.buffer.NettyDataBuffer.factory() - took 0.06 ms
    <org.springframework.core.io.buffer.NettyDataBuffer.factory() - took 0.14 ms
    >org.springframework.core.io.buffer.NettyDataBufferFactory.join(java.util.List)
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
     >org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object)
      >org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String)
       >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
       <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.03 ms
      <org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object,java.lang.String) - took 0.15 ms
     <org.springframework.util.Assert.isInstanceOf(java.lang.Class,java.lang.Object) - took 0.26 ms
     >org.springframework.core.io.buffer.NettyDataBuffer.getNativeBuffer()
     <org.springframework.core.io.buffer.NettyDataBuffer.getNativeBuffer() - took 0.03 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
     >org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String)
     <org.springframework.util.Assert.notNull(java.lang.Object,java.lang.String) - took 0.04 ms
    <org.springframework.core.io.buffer.NettyDataBufferFactory.join(java.util.List) - took 2.67 ms
   <org.springframework.core.io.buffer.DataBufferUtils.lambda$join$17(java.util.List) - took 2.91 ms
   >org.springframework.core.codec.AbstractDataBufferDecoder.lambda$decodeToMono$1(org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map,org.springframework.core.io.buffer.DataBuffer)
    >org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)
     >org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map)
      >org.springframework.core.codec.StringDecoder.getCharset(org.springframework.util.MimeType)
       >org.springframework.util.MimeType.getCharset()
        >org.springframework.util.MimeType.getParameter(java.lang.String)
        <org.springframework.util.MimeType.getParameter(java.lang.String) - took 0.04 ms
       <org.springframework.util.MimeType.getCharset() - took 0.08 ms
      <org.springframework.core.codec.StringDecoder.getCharset(org.springframework.util.MimeType) - took 0.13 ms
      >org.springframework.core.io.buffer.NettyDataBuffer.asByteBuffer()
      <org.springframework.core.io.buffer.NettyDataBuffer.asByteBuffer() - took 0.07 ms
      >org.springframework.core.io.buffer.DataBufferUtils.release(org.springframework.core.io.buffer.DataBuffer)
       >org.springframework.core.io.buffer.NettyDataBuffer.release()
       <org.springframework.core.io.buffer.NettyDataBuffer.release() - took 0.09 ms
      <org.springframework.core.io.buffer.DataBufferUtils.release(org.springframework.core.io.buffer.DataBuffer) - took 0.17 ms
      >org.springframework.core.log.CompositeLog.isDebugEnabled()
      <org.springframework.core.log.CompositeLog.isDebugEnabled() - took 0.04 ms
     <org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map) - took 1.07 ms
    <org.springframework.core.codec.StringDecoder.decodeDataBuffer(org.springframework.core.io.buffer.DataBuffer,org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map) - took 1.13 ms
   <org.springframework.core.codec.AbstractDataBufferDecoder.lambda$decodeToMono$1(org.springframework.core.ResolvableType,org.springframework.util.MimeType,java.util.Map,org.springframework.core.io.buffer.DataBuffer) - took 1.18 ms
